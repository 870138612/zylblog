import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,e as h}from"./app-41f12492.js";const l={},r=h('<p>⁉️ 个人回答不保证正确</p><h2 id="一面" tabindex="-1"><a class="header-anchor" href="#一面" aria-hidden="true">#</a> 一面</h2><h3 id="自我介绍" tabindex="-1"><a class="header-anchor" href="#自我介绍" aria-hidden="true">#</a> 自我介绍</h3><h3 id="谈谈你对测试流程的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对测试流程的理解" aria-hidden="true">#</a> 谈谈你对测试流程的理解</h3><ul><li>最近才开始学测试，整体流程不是太了解，我认为是编写好文档，然后设计好输入的样例，查看输出结果是否能对应上。</li></ul><h3 id="为什么想投递测试" tabindex="-1"><a class="header-anchor" href="#为什么想投递测试" aria-hidden="true">#</a> 为什么想投递测试？</h3><ul><li>因为 Java 开发竞争太大了，而且会后端代码，能更好的做白盒测试。</li><li><strong>其实竞争都挺大，哈哈。</strong></li></ul><h3 id="对数据库的查询-数据进行排序获取前十个用什么关键字" tabindex="-1"><a class="header-anchor" href="#对数据库的查询-数据进行排序获取前十个用什么关键字" aria-hidden="true">#</a> 对数据库的查询，数据进行排序获取前十个用什么关键字？</h3><ul><li>使用 order by 和 limit。</li><li><strong>如果进行分组呢？</strong></li><li>group by。</li></ul><h3 id="发现数据库查询的速度变慢-会想到什么优化措施" tabindex="-1"><a class="header-anchor" href="#发现数据库查询的速度变慢-会想到什么优化措施" aria-hidden="true">#</a> 发现数据库查询的速度变慢，会想到什么优化措施？</h3><ul><li>尽量减少 select * 的查询，如果数据库的数据太多，可以使用分库分表，经常查询的字段可以添加索引。</li></ul><h3 id="数据库死锁了解吗" tabindex="-1"><a class="header-anchor" href="#数据库死锁了解吗" aria-hidden="true">#</a> 数据库死锁了解吗？</h3><ul><li>操作系统中定义的死锁为有两个或者多个进程因为竞争资源导致阻塞，如果没有外力作用，两者都无法向前推进。</li><li>数据库中的死锁发生在两个事务对数据加锁并且请求修改对方加锁的数据。</li><li></li></ul><h3 id="常见的-http-状态码说下" tabindex="-1"><a class="header-anchor" href="#常见的-http-状态码说下" aria-hidden="true">#</a> 常见的 HTTP 状态码说下</h3><ul><li>200 请求成功，301 永久重定向，302 临时重定向，400 客户端错误，401 未授权，403 访问拒绝，404 页面没有找到，500 服务器错误，502 网关错误，504 网关超时。</li></ul><h3 id="get-和-post-区别" tabindex="-1"><a class="header-anchor" href="#get-和-post-区别" aria-hidden="true">#</a> GET 和 POST 区别</h3><ul><li>GET 用来请求数据，POST 用来插入数据。</li><li>GET 幂等，POST 不幂等。</li><li>GET 的参数放在 URL 中，POST 放在 Body 中。</li><li>这些都是规范，也可以不遵守，将后端的处理做好即可。</li></ul><h3 id="tcp-和-udp-的区别" tabindex="-1"><a class="header-anchor" href="#tcp-和-udp-的区别" aria-hidden="true">#</a> TCP 和 UDP 的区别</h3><ul><li>TCP 面向连接，字节流，可靠的传输层协议。</li><li>UDP 不面向连接，不可靠的传输层协议。</li><li>TCP 是端到端的协议，双方需要通过三次握手建立连接。</li><li>UDP 可以产生广播消息，TCP 不可以。</li><li><strong>UDP 适用于哪些场景？</strong></li><li>视频对话，语音对话，对正确性要求不高的场景。</li><li>TCP 适用于对要求高的场景，例如 FTP、POP3、SMTP、SSH 协议等都是基于 TCP 的。</li><li><strong>那么我在腾讯视频看视频的时候应该用的是哪种传输协议？</strong></li><li>应该是 TCP 吧，看视频其实就是文件传输的过程，使用 FTP 将文件传输到本地，然后通过播放器播放，对文件的完整性要求高。</li></ul><h3 id="如果有八个球-其中七个球的重量是相同的-另外一个球稍微重一点-给你一个天平-需要多少次比较能得到最重的球" tabindex="-1"><a class="header-anchor" href="#如果有八个球-其中七个球的重量是相同的-另外一个球稍微重一点-给你一个天平-需要多少次比较能得到最重的球" aria-hidden="true">#</a> 如果有八个球，其中七个球的重量是相同的，另外一个球稍微重一点，给你一个天平，需要多少次比较能得到最重的球？</h3><ul><li>刚开始想到的是二分查找，首先 4V4，然后 2V2，再 1V1。</li><li><strong>不对，还可以做优化。</strong></li><li>能给点提示吗？</li><li><strong>例如三个球，当中有一个重一点，则需要几次比较？</strong></li><li>一次，选择两个球，如果当中有一个重，则就是目标球，如果两个重量相等剩下的就是目标球。</li><li>所以八个球的场景下，应该先 3V3，如果有一边重，则退化为三个球的场景，如果同样重，则最重的球在剩余两个球中，需要一次比较。</li></ul><h3 id="有一根绳子-从一边开始烧-烧完需要一个小时-则如何通过烧绳子计时-1-小时-15-分钟" tabindex="-1"><a class="header-anchor" href="#有一根绳子-从一边开始烧-烧完需要一个小时-则如何通过烧绳子计时-1-小时-15-分钟" aria-hidden="true">#</a> 有一根绳子，从一边开始烧，烧完需要一个小时，则如何通过烧绳子计时 1 小时 15 分钟？</h3><ul><li>首先用两根绳子，当中一个从两边开始烧，需要半个小时烧完，另外一个先从一边开始烧，到了半个小时之后将另外一边点燃，则再过 15 分钟烧完。</li><li>剩余一个小时再烧一根绳子即可。</li></ul><h3 id="代码题爬楼梯" tabindex="-1"><a class="header-anchor" href="#代码题爬楼梯" aria-hidden="true">#</a> 代码题爬楼梯</h3><ul><li>动态规划</li></ul><h3 id="有-n-个人-他们各自有一个礼物-送给其他人-并且不能拿到自己的礼物-打印所有情况" tabindex="-1"><a class="header-anchor" href="#有-n-个人-他们各自有一个礼物-送给其他人-并且不能拿到自己的礼物-打印所有情况" aria-hidden="true">#</a> 有 n 个人，他们各自有一个礼物，送给其他人，并且不能拿到自己的礼物，打印所有情况</h3><ul><li>（回溯光速写完，以为秒了）。</li><li><strong>有个 BUG 你发现了吗？例如有五个人，前四个只拿到了前四个人的礼物，则最后一个人只剩下自己的礼物怎么办？</strong></li><li>跟前面任意一个人交换礼物即可。</li></ul><h3 id="代码题-找出无序数组中的最大值和最小值" tabindex="-1"><a class="header-anchor" href="#代码题-找出无序数组中的最大值和最小值" aria-hidden="true">#</a> 代码题，找出无序数组中的最大值和最小值</h3><ul><li>线性查找</li></ul><h3 id="反问" tabindex="-1"><a class="header-anchor" href="#反问" aria-hidden="true">#</a> 反问</h3><ul><li>面试官能评价一下我吗？</li><li>基础扎实，但是有时候会忽略细节，例如 for 循环里的 n（原本应该是 nums.length)。</li></ul><h2 id="二面" tabindex="-1"><a class="header-anchor" href="#二面" aria-hidden="true">#</a> 二面</h2><h3 id="hashmap底层结构" tabindex="-1"><a class="header-anchor" href="#hashmap底层结构" aria-hidden="true">#</a> HashMap底层结构</h3><h3 id="从-1-n-的数字中随机取出-m-个-数字-时间复杂度要求为-m" tabindex="-1"><a class="header-anchor" href="#从-1-n-的数字中随机取出-m-个-数字-时间复杂度要求为-m" aria-hidden="true">#</a> 从 1 ~ N 的数字中随机取出 M 个 数字，时间复杂度要求为 M</h3><h3 id="_52-张扑克牌中-取出炸弹的概率大还是顺子的概率大" tabindex="-1"><a class="header-anchor" href="#_52-张扑克牌中-取出炸弹的概率大还是顺子的概率大" aria-hidden="true">#</a> 52 张扑克牌中，取出炸弹的概率大还是顺子的概率大？</h3><h3 id="有-10-个袋子-每个袋子里面都有-100-个硬币-其中-9-个袋子中的硬币重量是相同的-都是-10-克-另外一个袋子里的硬币是-9-克-如果只用一次带刻度的电子秤-找到-9-克硬币的袋子的方法" tabindex="-1"><a class="header-anchor" href="#有-10-个袋子-每个袋子里面都有-100-个硬币-其中-9-个袋子中的硬币重量是相同的-都是-10-克-另外一个袋子里的硬币是-9-克-如果只用一次带刻度的电子秤-找到-9-克硬币的袋子的方法" aria-hidden="true">#</a> 有 10 个袋子，每个袋子里面都有 100 个硬币，其中 9 个袋子中的硬币重量是相同的，都是 10 克，另外一个袋子里的硬币是 9 克，如果只用一次带刻度的电子秤，找到 9 克硬币的袋子的方法</h3>',36),d=[r];function n(t,s){return i(),e("div",null,d)}const o=a(l,[["render",n],["__file","futu.html.vue"]]);export{o as default};

const l=JSON.parse('{"key":"v-09b0ef66","path":"/framework/0spring.html","title":"Spring","lang":"zh-CN","frontmatter":{"title":"Spring","icon":"spring","category":["框架"],"tag":["Spring","SpringMVC","SpringBoot"]},"headers":[{"level":2,"title":"Spring 是什么？","slug":"spring-是什么","link":"#spring-是什么","children":[]},{"level":2,"title":"单例 Bean 是单例设计模式吗？","slug":"单例-bean-是单例设计模式吗","link":"#单例-bean-是单例设计模式吗","children":[]},{"level":2,"title":"什么是单例池？作用是什么？","slug":"什么是单例池-作用是什么","link":"#什么是单例池-作用是什么","children":[]},{"level":2,"title":"Spring 中的设计模式","slug":"spring-中的设计模式","link":"#spring-中的设计模式","children":[]},{"level":2,"title":"Spring 中 Bean 创建的生命周期","slug":"spring-中-bean-创建的生命周期","link":"#spring-中-bean-创建的生命周期","children":[{"level":3,"title":"Bean 初始化和实例化的区别是什么？","slug":"bean-初始化和实例化的区别是什么","link":"#bean-初始化和实例化的区别是什么","children":[]},{"level":3,"title":"初始化后是什么？","slug":"初始化后是什么","link":"#初始化后是什么","children":[]},{"level":3,"title":"Bean 对象和普通对象之间的区别是什么","slug":"bean-对象和普通对象之间的区别是什么","link":"#bean-对象和普通对象之间的区别是什么","children":[]},{"level":3,"title":"@PostConstruct 是如何工作的","slug":"postconstruct-是如何工作的","link":"#postconstruct-是如何工作的","children":[]},{"level":3,"title":"构造方法推断","slug":"构造方法推断","link":"#构造方法推断","children":[]},{"level":3,"title":"先 ByType 再 ByName","slug":"先-bytype-再-byname","link":"#先-bytype-再-byname","children":[]},{"level":3,"title":"SpringAOP 怎么工作的？","slug":"springaop-怎么工作的","link":"#springaop-怎么工作的","children":[]},{"level":3,"title":"Spring 为什么要使用三级缓存来解决循环依赖？","slug":"spring-为什么要使用三级缓存来解决循环依赖","link":"#spring-为什么要使用三级缓存来解决循环依赖","children":[]},{"level":3,"title":"Spring 框架中的 Bean 是线程安全的吗？","slug":"spring-框架中的-bean-是线程安全的吗","link":"#spring-框架中的-bean-是线程安全的吗","children":[]},{"level":3,"title":"ApplicationContext 和 BeanFactory 有什么区别？","slug":"applicationcontext-和-beanfactory-有什么区别","link":"#applicationcontext-和-beanfactory-有什么区别","children":[]},{"level":3,"title":"Spring 容器的启动流程","slug":"spring-容器的启动流程","link":"#spring-容器的启动流程","children":[]}]},{"level":2,"title":"Spring 事务","slug":"spring-事务","link":"#spring-事务","children":[{"level":3,"title":"事务实现原理","slug":"事务实现原理","link":"#事务实现原理","children":[]},{"level":3,"title":"Spring 事务传播机制","slug":"spring-事务传播机制","link":"#spring-事务传播机制","children":[]},{"level":3,"title":"Spring 事务失效的原因","slug":"spring-事务失效的原因","link":"#spring-事务失效的原因","children":[]}]},{"level":2,"title":"SpringMVC","slug":"springmvc","link":"#springmvc","children":[{"level":3,"title":"SpringMVC 处理请求的底层原理","slug":"springmvc-处理请求的底层原理","link":"#springmvc-处理请求的底层原理","children":[]},{"level":3,"title":"SpringMVC 的核心组件有哪些？","slug":"springmvc-的核心组件有哪些","link":"#springmvc-的核心组件有哪些","children":[]},{"level":3,"title":"SpringMVC 零配置","slug":"springmvc-零配置","link":"#springmvc-零配置","children":[]},{"level":3,"title":"统一异常处理","slug":"统一异常处理","link":"#统一异常处理","children":[]}]},{"level":2,"title":"SpringBoot","slug":"springboot","link":"#springboot","children":[{"level":3,"title":"SpringBootApplication 注解的作用？","slug":"springbootapplication-注解的作用","link":"#springbootapplication-注解的作用","children":[]},{"level":3,"title":"SpringBoot 中的 spring.factories 文件有什么作用？","slug":"springboot-中的-spring-factories-文件有什么作用","link":"#springboot-中的-spring-factories-文件有什么作用","children":[]},{"level":3,"title":"SpringBoot 的启动流程","slug":"springboot-的启动流程","link":"#springboot-的启动流程","children":[]},{"level":3,"title":"自动装配原理","slug":"自动装配原理","link":"#自动装配原理","children":[]},{"level":3,"title":"实现一个 Stater","slug":"实现一个-stater","link":"#实现一个-stater","children":[]},{"level":3,"title":"自定义注解","slug":"自定义注解","link":"#自定义注解","children":[]}]}],"git":{"createdTime":1690615316000,"updatedTime":1693220558000,"contributors":[{"name":"ZYL1210","email":"870138612@qq.com","commits":10}]},"readingTime":{"minutes":16.91,"words":5073},"filePathRelative":"framework/0spring.md","localizedDate":"2023年7月29日","excerpt":"<h2> Spring 是什么？</h2>\\n<p>Spring 是一个轻量级的控制反转（Ioc）和面向切面（AOP）的容器框架。</p>\\n<ul>\\n<li>从大小和开销两方面而言 Spring 是轻量级的。</li>\\n<li>通过控制反转的技术达到松耦合。</li>\\n<li>提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务进行内聚性的开发。</li>\\n<li>包含和管理应用对象的配置和声明周期，通过容器实现。</li>\\n<li>将简单的配置组件组合成复杂的应用。</li>\\n</ul>\\n"}');export{l as data};

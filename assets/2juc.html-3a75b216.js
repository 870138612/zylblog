import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as u,e as k,b as n,d as a,a as t,w as s,f as c}from"./app-b80df956.js";const h="/markdown/jmm.jpg",v="/markdown/image-20230725154347412.png",m="/markdown/image-20230725154314997.png",b="/markdown/image-20230725155528080.png",y="/markdown/image-20230725155457446.png",f="/markdown/image-20230725160038069.png",g={},w=n("h2",{id:"java-内存模型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java-内存模型","aria-hidden":"true"},"#"),a(" Java 内存模型")],-1),x=n("h3",{id:"指令重排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#指令重排序","aria-hidden":"true"},"#"),a(" 指令重排序")],-1),_=n("ul",null,[n("li",null,"编译器优化重排：编译器在不改变单线程程序语义的前提下，重新安排语句执行顺序。"),n("li",null,"指令并行重排：如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。")],-1),A=n("p",null,"指令重排序可以保证串行语义的一致，但是没义务保证多线程之间语义的一致，在多线程下，指令重排可能会导致问题。",-1),z=c('<h3 id="什么是-java-内存模型-为什么需要-java-内存模型" tabindex="-1"><a class="header-anchor" href="#什么是-java-内存模型-为什么需要-java-内存模型" aria-hidden="true">#</a> 什么是 Java 内存模型？为什么需要 Java 内存模型？</h3><p>JMM 是 Java 定义的并发编程相关的一组规范，除了抽象了线程和内存之间的关系之外，还规定了 Java 源代码到 CPU 可执行指令这个转化过程要遵循哪些和并发相关的原则和规范，主要目的是为了简化编程，增强代码的可移植性。</p><h3 id="什么是主内存-什么是本地内存" tabindex="-1"><a class="header-anchor" href="#什么是主内存-什么是本地内存" aria-hidden="true">#</a> 什么是主内存？什么是本地内存？</h3><ul><li>主内存：所有线程创建的对象实例都放在主内存中；</li><li>本地内存：每个线程都有私有的本地内存来存储共享变量的副本，并且每一个线程只能访问自己的本地内存，无法访问其他线程的本地内存。本地内存是 JMM 抽象出的概念，存储了主内存中的变量副本。<img src="'+h+`" alt="jmm"></li></ul><h3 id="java-内存结构和-java-内存模型的区别" tabindex="-1"><a class="header-anchor" href="#java-内存结构和-java-内存模型的区别" aria-hidden="true">#</a> Java 内存结构和 Java 内存模型的区别</h3><ul><li>Java 内存结构和运行时区域有关，定义了 JVM 在运行时如何分区存储数据，例如堆主要用来存放对象实例。</li><li>JMM 和 Java 的并发编程有关，抽象了线程和内存之间的关系，规定了 Java 源代码到 CPU 可执行指令这个转化过程要遵循哪些并发相关的原则和规范，目的主要是简化多线程编程，增强程序的可移植性</li></ul><h3 id="happens-before" tabindex="-1"><a class="header-anchor" href="#happens-before" aria-hidden="true">#</a> happens-before</h3><p>前一个操作的结果应该对后一个操作是可见的，无论这两个操作是不是在同一个线程里。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> userNum <span class="token operator">=</span> <span class="token function">getUserNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// 1</span>
<span class="token keyword">int</span> teacherNum <span class="token operator">=</span> <span class="token function">getTeacherNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	 <span class="token comment">// 2</span>
<span class="token keyword">int</span> totalNum <span class="token operator">=</span> userNum <span class="token operator">+</span> teacherNum<span class="token punctuation">;</span>	<span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在线程并发执行的时候，可能 1 2 操作的结果还没有存入变量中，3 操作已经开始执行，这时得到的结果就不是正确结果。（指令流水线数据相关）</p><h3 id="happens-before-常见规则" tabindex="-1"><a class="header-anchor" href="#happens-before-常见规则" aria-hidden="true">#</a> happens-before 常见规则</h3><ol><li>程序顺序规则：一个线程内，书写在前的操作 happens-before 于书写在后面的操作；</li><li>解锁规则：解锁 happens-before 加锁；</li><li>volatile 变量规则：对于一个 <code>volatile</code> 变量的写操作 happens-before 后面对这个变量的读操作，也就是对这个变量的修改对其后的所有操作都可见；</li><li>传递规则：如果 A happens-before B，B happens-before C，则A happens-before C；</li><li>线程启动规则：Thread 对象的 <code>start()</code> 方法 happens-before 这个线程的每一个操作。</li></ol><p>如果两个操作不满足上述条件的任意一个，则这两个操作就没有顺序保障，JVM 可以对这两个操作进行重排序。</p><h2 id="并发编程的三个特性" tabindex="-1"><a class="header-anchor" href="#并发编程的三个特性" aria-hidden="true">#</a> 并发编程的三个特性</h2><p><strong>原子性：</strong></p><p>一次操作或者多次操作，要么所有的操作都能全部执行不会收到任何外界因素干扰而中断，要么都不执行。</p><p><code>synchronized</code> 和各种 <code>Lock</code> 来实现原子性。</p><p><strong>可见性：</strong></p><p>当一个线程对共享变量进行修改，那么另外的线程都是能立即看到的。</p><p><code>synchronized</code>、<code>volatile</code>、各种 <code>Lock</code> 实现可见性。</p><p><strong>有序性：</strong></p><p>由于指令重排序问题，代码的执行顺序未必就是编写代码的顺序。</p><p>使用 <code>volatile</code> 关键字可以禁止指令进行重排序优化。</p><h2 id="volatile-关键字" tabindex="-1"><a class="header-anchor" href="#volatile-关键字" aria-hidden="true">#</a> volatile 关键字</h2><p>在 Java 中，<code>volatile</code> 关键字可以保证变量的可见性，如果将变量声明为 <code>volatile</code> ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。</p><p><strong><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</strong></p><h3 id="volatile-如何禁止指令重排序" tabindex="-1"><a class="header-anchor" href="#volatile-如何禁止指令重排序" aria-hidden="true">#</a> volatile 如何禁止指令重排序？</h3><p>如果将变量通过 <code>volatile</code> 修饰，则对这个变量读写的时候会添加上特定的读写屏障保证可见性。</p><p>在 CPU 的物理世界里，内存屏障通常有三种：</p><p>lfence: 读屏障（load fence)，即立刻让 CPU Cache 失效，从内存中读取数据，并装载入 Cache 中。</p><p>sfence: 写屏障（write fence）, 即立刻进行 flush，把缓存中的数据刷入内存中。</p><p>mfence: 全屏障（memory fence），即读写屏障，保证读写都串行化，确保数据都写入内存并清除缓存。</p><p>双检查单例模式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//构造方法私有</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> <span class="token constant">SINGLETON</span><span class="token punctuation">;</span><span class="token comment">//volatile修饰的singleton 保证可见性</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">SINGLETON</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//对类对象加锁</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">SINGLETON</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token constant">SINGLETON</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>volatile</code> 是“轻量级” <code>synchronized</code>，保证了共享变量的“可见性”（JMM确保所有线程看到这个变量的值是一致的），当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，<strong>会发出信号通知其他CPU将该变量的缓存行置为无效状态，并且锁住缓存行</strong>，因此当其他CPU 需要读取这个变量时，要等锁释放，并发现自己缓存行是无效的，那么它就会从内存重新读取。</p><h2 id="乐观锁和悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁和悲观锁" aria-hidden="true">#</a> 乐观锁和悲观锁</h2><h3 id="什么是乐观锁" tabindex="-1"><a class="header-anchor" href="#什么是乐观锁" aria-hidden="true">#</a> 什么是乐观锁？</h3><p>乐观锁总是假设最好的情况，即认为将要修改的数据并没有被其他线程修改，修改失败采用重复尝试的办法。</p><p>验证数据是否被其他线程修改可通过版本号机制或者CAS算法。</p><p>在Java中 <code>java.util.concurrent.atomic</code> 包下面的原子变量类（比如 <code>AtomicInteger</code>、<code>LongAdder</code>）就是使用了乐观锁的一种实现方式 <strong>CAS</strong> 实现的。<code>AtomicInteger</code> 类主要利用CAS(compare and swap)</p><ul><li><code>volatile</code> 和 <code>native</code> 方法来保证原子操作，从而避免 <code>synchronized</code> 的高开销，执行效率大为提升。</li></ul><h3 id="什么是悲观锁" tabindex="-1"><a class="header-anchor" href="#什么是悲观锁" aria-hidden="true">#</a> 什么是悲观锁？</h3><p>悲观锁总是假设最坏的情况，认为共享资源总是会被其他线程修改了，所以在访问资源的时候采取加锁的方案，防止其他线程修改，像Java中 <code>synchronized</code> 和 <code>ReentrantLock</code> 等独占锁就是悲观锁思想的实现。</p><p>高并发的场景下，激烈的锁竞争会造成线程阻塞，大量阻塞线程会导致系统的上下文切换，增加系统的性能开销。并且，悲观锁还可能会存在死锁问题，影响代码的正常运行。</p><h3 id="cas" tabindex="-1"><a class="header-anchor" href="#cas" aria-hidden="true">#</a> CAS</h3><p>CAS的全称是<strong>Compare And Swap（比较与交换）</strong>，用于实现乐观锁，被广泛应用于各大框架中。CAS的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。</p><p>CAS是一个原子操作，底层依赖于一条 CPU 的原子指令。</p><p>CAS涉及到三个操作数：</p><ul><li><strong>V</strong>：要更新的变量值(Var)</li><li><strong>E</strong>：预期值(Expected)</li><li><strong>N</strong>：拟写入的新值(New)</li></ul><h3 id="aba-问题" tabindex="-1"><a class="header-anchor" href="#aba-问题" aria-hidden="true">#</a> ABA 问题</h3><p>如果有一个线程将变量值A改为B，之后又有一个线程将B改为A，则第三个线程采用CAS进行修改的时候发现预期值A正确，则认为变量没有被修改，其实已经修改了两次。</p><p>解决ABA问题就是添加版本号或者是时间戳。</p><h3 id="cas-问题" tabindex="-1"><a class="header-anchor" href="#cas-问题" aria-hidden="true">#</a> CAS 问题</h3><p>CAS经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给CPU带来非常大的执行开销。</p><p>CAS只对单个共享变量有效，当操作涉及跨多个共享变量时CAS无效。但是从JDK 1.5开始，提供了 <code>AtomicReference</code> 类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</p><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized" aria-hidden="true">#</a> synchronized</h2><h3 id="synchronized-是什么-有什么用" tabindex="-1"><a class="header-anchor" href="#synchronized-是什么-有什么用" aria-hidden="true">#</a> synchronized 是什么？有什么用？</h3><p><code>synchronized</code> 是 Java 中的一个关键字，翻译成中文是同步的意思，主要解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><p>早期版本中 <code>synchronized</code> 属于重量级锁，Java6之后对<code>synchronized</code> 做了优化。</p>`,59),C={href:"https://ylzhong.top/java/3juc/4synchronizedlock.html",target:"_blank",rel:"noopener noreferrer"},S=n("h3",{id:"sychronized-修饰方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sychronized-修饰方法","aria-hidden":"true"},"#"),a(" sychronized 修饰方法")],-1),j=n("p",null,[n("code",null,"synchronized"),a(" 关键字的使用方式主要有下面 3 种：")],-1),N=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"synchronized"),a(),n("span",{class:"token keyword"},"void"),a(),n("span",{class:"token function"},"method"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"//锁对象"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"synchronized"),a(),n("span",{class:"token keyword"},"static"),a(),n("span",{class:"token keyword"},"void"),a(),n("span",{class:"token function"},"method"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"//锁类"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"synchronized"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"//锁对象"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token keyword"},"synchronized"),n("span",{class:"token punctuation"},"("),a("类"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"//锁类"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=c('<p><code>synchronized</code> 关键字加到 <code>static</code> 静态方法和 <code>synchronized(class)</code> 代码块上都是是给Class类上锁；</p><p><code>synchronized</code> 关键字加到实例方法上是给对象实例上锁。</p><h3 id="synchronized-底层原理" tabindex="-1"><a class="header-anchor" href="#synchronized-底层原理" aria-hidden="true">#</a> synchronized 底层原理</h3><p><strong>修饰同步代码块</strong></p><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><p>在执行 <code>monitorenter</code> 时，会尝试获取对象的锁，如果锁的计数器为0则表示锁可以被获取，获取后将锁计数器设为1。</p><p>对象锁的的拥有者线程才可以执行 <code>monitorexit</code> 指令来释放锁。在执行 <code>monitorexit</code> 指令后，将锁计数器设为0，表明锁被释放，其他线程可以尝试获取锁。</p><p><strong>修饰方法</strong></p><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。JVM 通过该 <code>ACC_SYNCHRONIZED</code> 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。</p><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><p>两者本质都是对对象监视器<strong>monitor</strong>的获取。</p><h3 id="synchronized-和-volatile-有什么区别" tabindex="-1"><a class="header-anchor" href="#synchronized-和-volatile-有什么区别" aria-hidden="true">#</a> synchronized 和 volatile 有什么区别？</h3><ul><li><p><code>volatile</code> 关键字是线程同步的轻量级实现，所以 <code>volatile</code> 性能肯定比 <code>synchronized</code> 关键字要好 。但是 <code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块 。</p></li><li><p><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</p></li><li><p><code>volatile</code> 关键字主要用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性。</p></li></ul><h2 id="reentrantlock" tabindex="-1"><a class="header-anchor" href="#reentrantlock" aria-hidden="true">#</a> ReentrantLock</h2><h3 id="reentrantlock-是什么" tabindex="-1"><a class="header-anchor" href="#reentrantlock-是什么" aria-hidden="true">#</a> ReentrantLock 是什么？</h3><p><code>ReentrantLock</code> 实现了 <code>Lock</code> 接口，是一个可重入且独占式的锁，和 <code>synchronized</code> 关键字类似。不过 <code>ReentrantLock</code> 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。</p><p><code>ReentrantLock</code> 里面有一个内部类 <code>Sync</code>，<code>Sync</code> 继承AQS（<code>AbstractQueuedSynchronizer</code>），添加锁和释放锁的大部分操作实际上都是在 <code>Sync</code> 中实现的。<code>Sync</code> 有公平锁 <code>FairSync</code> 和非公平锁两个子类，默认是非公平实现。</p>',17),R={href:"https://ylzhong.top/java/3juc/5aqs.html",target:"_blank",rel:"noopener noreferrer"},T=c(`<h3 id="公平锁和非公平锁有什么区别" tabindex="-1"><a class="header-anchor" href="#公平锁和非公平锁有什么区别" aria-hidden="true">#</a> 公平锁和非公平锁有什么区别？</h3><ul><li><p><strong>公平锁</strong>：锁被释放之后，先申请的线程先得到锁。性能较差一些，因为公平锁为了保证时间上的绝对顺序，上下文切换更频繁。</p></li><li><p><strong>非公平锁</strong>：锁被释放之后，后申请的线程可能会先获取到锁，是随机或者按照其他优先级排序的。性能更好，但可能会导致某些线程永远无法获取到锁。</p></li></ul><h3 id="reentrantlock-加锁解锁原理" tabindex="-1"><a class="header-anchor" href="#reentrantlock-加锁解锁原理" aria-hidden="true">#</a> ReentrantLock 加锁解锁原理</h3><p>以非公平实现为例。</p><p><code>NonfairSync</code> 继承自AQS。</p><h4 id="加锁没有竞争流程" tabindex="-1"><a class="header-anchor" href="#加锁没有竞争流程" aria-hidden="true">#</a> 加锁没有竞争流程</h4><p>通过CAS操作修改state值为1表示加锁，成功之后修改锁的Owner为线程自己。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="加锁有竞争流程" tabindex="-1"><a class="header-anchor" href="#加锁有竞争流程" aria-hidden="true">#</a> 加锁有竞争流程</h4><ul><li>有竞争时，Thread-1的CAS操作失败，则会进入 <code>acquire(1)</code> 方法，则会通过 <code>tryAcquire(arg)</code> 再次尝试加锁，如果还是失败则会创建Node节点对象放入到CLH等待队列中，队列中的第一个节点为哨兵节点，不存放信息。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
		<span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt="image-20230725154347412"></p><ul><li><code>acquireQueued()</code> 方法检查自己是不是首节点的后一个节点，如果是还会再次进行尝试加锁，如果加锁失败，则会修改前驱节点的 <code>waitStatus</code> 为-1，表示前驱节点有责任唤醒后继的节点。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>
                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>
            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>shouldParkAfterFailedAcquire</code> 第一次执行的时候会修改前驱节点的 <code>waitSatus</code>，返回false，当前线程会再次进行加锁尝试，如果还是失败，第二次则会返回true并执行 <code>parkAndCheckInterrupt()</code>。Thread-1进入阻塞状态。</li></ul><p><img src="`+m+'" alt="image-20230725154314997"></p><h4 id="解锁竞争成功流程" tabindex="-1"><a class="header-anchor" href="#解锁竞争成功流程" aria-hidden="true">#</a> 解锁竞争成功流程</h4><ul><li>有多个线程竞争资源最后都变成阻塞状态。</li></ul><p><img src="'+b+'" alt="image-20230725155528080"></p><ul><li>Thread-0释放锁，进入 <code>tryRelease</code> 流程，Owner线程改为null，state设置为0。</li></ul><p><img src="'+y+'" alt="image-20230725155457446"></p><ul><li>此时当前队列不为空，且哨兵节点的 <code>waitStatus</code> 为-1，则将后继的节点 <code>unpark</code> 恢复运行，哨兵节点变成下一个节点，并设置工作线程为null，原来的哨兵节点丢弃，后续线程竞争加锁流程同上。</li></ul><p><img src="'+f+`" alt="image-20230725160038069"></p><h4 id="解锁竞争失败流程" tabindex="-1"><a class="header-anchor" href="#解锁竞争失败流程" aria-hidden="true">#</a> 解锁竞争失败流程</h4><ul><li>如果在将第一个阻塞队列节点中对应的线程 <code>unpark</code>，并且外部又来了一个竞争线程Thread-4。</li><li>则两者会竞争，竞争失败的会再次进入队列中等待。</li></ul><h4 id="可重入原理" tabindex="-1"><a class="header-anchor" href="#可重入原理" aria-hidden="true">#</a> 可重入原理</h4><ul><li>加锁时如果发现 <code>exclusiveOwnerThread</code> 线程是自己则表示重入，将 <code>state++</code>。解锁时如果 <code>state</code> 不是1则不会解锁，而是将 <code>state--</code>，当 <code>state</code> 为0时才会真正解开。</li></ul><h4 id="可打断原理" tabindex="-1"><a class="header-anchor" href="#可打断原理" aria-hidden="true">#</a> 可打断原理</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>park</code> 过程中如果被 <code>interrupt</code> 会进入上述语句，最后抛出异常，不会再进入循环中竞争锁。</p><h4 id="公平锁原理" tabindex="-1"><a class="header-anchor" href="#公平锁原理" aria-hidden="true">#</a> 公平锁原理</h4><ul><li>非公平锁中，外部的竞争线程不会检查AQS队列，直接进行抢占锁。</li><li>公平锁中，外部的竞争线程会先检查AQS队列中是否有线程Node，没有才去竞争，有线程Node则表示已经有先来的线程排队等待。</li></ul><h3 id="synchronized-和-reentrantlock-有什么区别" tabindex="-1"><a class="header-anchor" href="#synchronized-和-reentrantlock-有什么区别" aria-hidden="true">#</a> synchronized 和 ReentrantLock 有什么区别？</h3><ul><li>两者都是可重入锁，也就是线程可以再次获取自己的内部锁。</li><li><code>synchronized</code> 依赖于JVM而 <code>ReentrantLock</code> 依赖于API。</li><li><code>ReentrantLock</code> 比 <code>synchronized</code> 增加了一些高级功能： <ul><li>等待可中断：<code>ReentrantLock</code> 提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li>可实现公平锁: <code>ReentrantLock</code> 可以指定是公平锁还是非公平锁，而 <code>synchronized</code> 只能是非公平锁。</li><li>可实现选择性通知（锁可以绑定多个条件）: <code>synchronized</code> 关键字与 <code>wait()</code> 和 <code>notify()</code> / <code>notifyAll()</code> 方法相结合可以实现等待/通知机制。<code>ReentrantLock</code> 也可以实现，但是需要借助于 <code>Condition</code> 接口与 <code>newCondition()</code> 方法。</li></ul></li></ul><h3 id="可中断锁和不可中断锁有什么区别" tabindex="-1"><a class="header-anchor" href="#可中断锁和不可中断锁有什么区别" aria-hidden="true">#</a> 可中断锁和不可中断锁有什么区别？</h3><ul><li><strong>可中断锁</strong>：获取锁的过程中可以被中断，不需要一直等到获取锁之后 才能进行其他逻辑处理。<code>ReentrantLock</code> 就属于是可中断锁。</li><li><strong>不可中断锁</strong>：一旦线程申请了锁，就只能等到拿到锁以后才能进行其他的逻辑处理。 <code>synchronized</code> 就属于是不可中断锁。</li></ul>`,36);function E(q,P){const p=i("ExternalLinkIcon"),l=i("Tabs");return r(),u("div",null,[w,x,_,A,k(" more "),z,n("p",null,[a("☀️详见"),n("a",C,[a("synchronized 锁优化"),t(p)])]),S,j,t(l,{id:"264",data:[{id:"修饰实例方法"},{id:"修饰静态方法"},{id:"修饰代码块"}],active:0},{title0:s(({value:e,isActive:o})=>[a("修饰实例方法")]),title1:s(({value:e,isActive:o})=>[a("修饰静态方法")]),title2:s(({value:e,isActive:o})=>[a("修饰代码块")]),tab0:s(({value:e,isActive:o})=>[N]),tab1:s(({value:e,isActive:o})=>[L]),tab2:s(({value:e,isActive:o})=>[J]),_:1}),I,n("p",null,[a("☀️详见"),n("a",R,[a("AQS 抽象队列同步器"),t(p)])]),T])}const U=d(g,[["render",E],["__file","2juc.html.vue"]]);export{U as default};

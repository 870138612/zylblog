import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as t,e as c,b as a,d as s,f as o}from"./app-5e4ac144.js";const i={},l=a("h2",{id:"字节码",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#字节码","aria-hidden":"true"},"#"),s(" 字节码")],-1),d=a("p",null,[s("在 Java 中，JVM 可以理解的代码就叫做 "),a("code",null,"字节码"),s("（即扩展名为 "),a("code",null,".class"),s(" 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。")],-1),r=o(`<h2 id="class-文件结构总结" tabindex="-1"><a class="header-anchor" href="#class-文件结构总结" aria-hidden="true">#</a> Class 文件结构总结</h2><h3 id="魔数-magic-number" tabindex="-1"><a class="header-anchor" href="#魔数-magic-number" aria-hidden="true">#</a> 魔数（Magic Number）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	u4             magic<span class="token punctuation">;</span> <span class="token comment">//Class 文件的标志</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每个 Class 文件的<strong>头 4 个字节</strong>称为魔数（Magic Number）,它的唯一作用是<strong>确定这个文件是否为一个能被虚拟机接收的 Class 文件</strong>。</p><h3 id="class-文件版本号-minor-major-version" tabindex="-1"><a class="header-anchor" href="#class-文件版本号-minor-major-version" aria-hidden="true">#</a> Class 文件版本号（Minor &amp; Major Version）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    u2             minor_version<span class="token punctuation">;</span><span class="token comment">//Class 的小版本号</span>
    u2             major_version<span class="token punctuation">;</span><span class="token comment">//Class 的大版本号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>四个字节</strong>存储的是 Class 文件的版本号：第 5 和第 6 位是<strong>次版本号</strong>（2 个字节），第 7 和第 8 位是<strong>主版本号</strong>（2 个字节）。</p><p>每当 Java 发布大版本的时候，主版本号都会加 1。</p><p>高版本的 JVM 能运行低版本编译器生成的<code>.class</code>文件，但是低版本的 JVM 不会向上兼容高版本的 <code>.class</code> 文件。</p><h3 id="常量池-constant-pool" tabindex="-1"><a class="header-anchor" href="#常量池-constant-pool" aria-hidden="true">#</a> 常量池（Constant Pool）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	u2             constant_pool_count<span class="token punctuation">;</span><span class="token comment">//常量池的数量</span>
	cp_info        constant_pool<span class="token punctuation">[</span>constant_pool_count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//常量池</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着主次版本号之后的是常量池，常量池的数量是 <code>constant_pool_count-1</code>（<strong>常量池计数器是从 1 开始计数的，将第 0 项常量空出来是有特殊考虑的，索引值为 0 代表“不引用任何一个常量池项”</strong>）。</p><p>常量池主要存放两大常量：<strong>字面量和符号引用</strong>。字面量比较接近于 Java 语言层面的的常量概念，如文本字符串、声明为 final 的常量值等。而符号引用则属于编译原理方面的概念。包括下面三类常量：</p><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul><p>常量池中每一项常量都是一个表，这 14 种表有一个共同的特点：<strong>开始的第一位是一个 u1 类型的标志位 -tag 来标识常量的类型，代表当前这个常量属于哪种常量类型</strong>。</p><h3 id="访问标志-access-flags" tabindex="-1"><a class="header-anchor" href="#访问标志-access-flags" aria-hidden="true">#</a> 访问标志(Access Flags)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    u2             access_flags<span class="token punctuation">;</span><span class="token comment">//Class 的访问标记</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在常量池结束之后，紧接着的两个字节代表访问标志，<strong>这个标志用于识别一些类或者接口层次的访问信息</strong>，包括：这个 Class 是类还是接口，是否为 <code>public</code> 或者 <code>abstract</code> 类型，如果是类的话是否声明为 <code>final</code> 等等。</p><h3 id="当前类-this-class-、父类-super-class-、接口-interfaces-索引集合" tabindex="-1"><a class="header-anchor" href="#当前类-this-class-、父类-super-class-、接口-interfaces-索引集合" aria-hidden="true">#</a> 当前类（This Class）、父类（Super Class）、接口（Interfaces）索引集合</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    u2             this_class<span class="token punctuation">;</span><span class="token comment">//当前类</span>
    u2             super_class<span class="token punctuation">;</span><span class="token comment">//父类</span>
    u2             interfaces_count<span class="token punctuation">;</span><span class="token comment">//接口</span>
    u2             interfaces<span class="token punctuation">[</span>interfaces_count<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//一个类可以实现多个接口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 类的继承关系由类索引、父类索引和接口索引集合三项确定。类索引、父类索引和接口索引集合按照顺序排在访问标志之后，</p><p><strong>类索引</strong>用于确定这个类的全限定名，<strong>父类索</strong>引用于确定这个类的父类的全限定名，由于 Java 语言的单继承，所以父类索引只有一个，除了 <code>java.lang.Object</code> 之外，所有的 Java 类都有父类，因此除了 <code>java.lang.Object</code> 外，所有 Java 类的父类索引都不为 0。</p><p><strong>接口索引</strong>集合用来描述这个类实现了那些接口，这些被实现的接口将按 <code>implements</code> (如果这个类本身是接口的话则是<code>extends</code>) 后的接口顺序从左到右排列在接口索引集合中。</p><h3 id="字段表集合-fields" tabindex="-1"><a class="header-anchor" href="#字段表集合-fields" aria-hidden="true">#</a> 字段表集合（Fields）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    u2             fields_count<span class="token punctuation">;</span><span class="token comment">//Class 文件的字段的个数</span>
    field_info     fields<span class="token punctuation">[</span>fields_count<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//一个类会可以有个字段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字段表（field info）用于描述接口或类中声明的变量。<strong>字段包括类级变量以及实例变量，但不包括在方法内部声明的局部变量</strong>。</p><h3 id="方法表集合-methods" tabindex="-1"><a class="header-anchor" href="#方法表集合-methods" aria-hidden="true">#</a> 方法表集合（Methods）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    u2             methods_count<span class="token punctuation">;</span><span class="token comment">//Class 文件的方法的数量</span>
    method_info    methods<span class="token punctuation">[</span>methods_count<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//一个类可以有个多个方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>methods_count 表示方法的数量，而 method_info 表示方法表。</p><p>Class 文件存储格式中对方法的描述与对字段的描述几乎采用了完全一致的方式。方法表的结构如同字段表一样，依次包括了访问标志、名称索引、描述符索引、属性表集合几项。</p><h3 id="属性表集合-attributes" tabindex="-1"><a class="header-anchor" href="#属性表集合-attributes" aria-hidden="true">#</a> 属性表集合（Attributes）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   u2             attributes_count<span class="token punctuation">;</span><span class="token comment">//此类的属性表中的属性数</span>
   attribute_info attributes<span class="token punctuation">[</span>attributes_count<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//属性表集合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Class 文件，字段表，方法表中都可以携带自己的属性表集合，以用于描述某些场景专有的信息。与 Class 文件中其它的数据项目要求的顺序、长度和内容不同，属性表集合的限制稍微宽松一些，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写 入自己定义的属性信息，Java 虚拟机运行时会忽略掉它不认识的属性。</p>`,33);function p(u,m){return e(),t("div",null,[l,d,c(" more "),r])}const g=n(i,[["render",p],["__file","3classfilestructure.html.vue"]]);export{g as default};

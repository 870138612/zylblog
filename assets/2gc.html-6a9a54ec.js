import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as o,f as i,b as r,e as n}from"./app-e3c2a419.js";const t="/markdown/130.jpg",s="/markdown/image-20230520203719818.png",l="/markdown/image-20230520203818307.png",d="/markdown/image-20230520203801684.png",p="/markdown/image-20230520204024801.png",g="/markdown/image-20230520204132639.png",h={},c=r("p",null,[r("img",{src:t,alt:"130"})],-1),u=n('<h2 id="内存分配和回收原则" tabindex="-1"><a class="header-anchor" href="#内存分配和回收原则" aria-hidden="true">#</a> 内存分配和回收原则</h2><h3 id="对象优先在-eden-中分配" tabindex="-1"><a class="header-anchor" href="#对象优先在-eden-中分配" aria-hidden="true">#</a> 对象优先在 Eden 中分配</h3><p>大多数情况下，对象在新生代中 Eden 区分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</p><h3 id="大对象直接进入老年代" tabindex="-1"><a class="header-anchor" href="#大对象直接进入老年代" aria-hidden="true">#</a> 大对象直接进入老年代</h3><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。</p><p>大对象直接进入老年代主要是为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。</p><h3 id="长期存活的对象将进入老年代" tabindex="-1"><a class="header-anchor" href="#长期存活的对象将进入老年代" aria-hidden="true">#</a> 长期存活的对象将进入老年代</h3><p>虚拟机给每个对象一个对象年龄（Age）计数器。</p><p>大部分情况，对象都会首先在 Eden 区域分配。如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间（s0 或者 s1）中，并将对象年龄设为 1（Eden 区-&gt; Survivor 区后对象的初始年龄变为 <strong>1</strong>）。</p><p>对象在 Survivor 中每熬过一次 Minor GC ,年龄就增加1岁，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。</p><p>对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><div class="hint-container info"><p class="hint-container-title">额外的</p><p>HotSpot 遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了 Survivor 区的 50% 时（默认值是 50%，可以通过 <code>-XX:TargetSurvivorRatio = percent</code> 来设置），取这个年龄和 <code>MaxTenuringThreshold</code> 中更小的一个值，作为新的晋升年龄阈值。</p></div><h3 id="gc-区域" tabindex="-1"><a class="header-anchor" href="#gc-区域" aria-hidden="true">#</a> GC 区域</h3><p>针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：</p><p><strong>部分收集 (Partial GC)</strong>：</p><ul><li>新生代收集（Minor GC/Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC/Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p><strong>整堆收集（Full GC）</strong>：收集整个 Java 堆和方法区。</p><h3 id="空间分配担保" tabindex="-1"><a class="header-anchor" href="#空间分配担保" aria-hidden="true">#</a> 空间分配担保</h3><p>在发生 Minor GC 之前，虚拟机必须先检查老年代<strong>最大可用的连续空间是否大于新生代所有对象总空间</strong>，如果这个条件成立，那这一次 Minor GC 可以确保是安全的，如果不成立，则虚拟机会先查看 <code>-XX:HandlePromotionFailure</code> 参数的设置值是否允许担保失败（Handle Promotion Failure）；如果允许，那会继续检查<strong>老年代最大可用的连续空间</strong>是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次 Minor GC，尽管这次 Minor GC 是有风险的；如果小于，或者 <code>-XX: HandlePromotionFailure</code> 设置不允许冒险，那这时就要改为进行一次 Full GC。</p><blockquote><p>可能存在所有的新生代对象都在这次 GC 之后晋升至老年代，老年代如果没有足够的内存则无法担保分配。</p></blockquote><h2 id="死亡对象的判断方法" tabindex="-1"><a class="header-anchor" href="#死亡对象的判断方法" aria-hidden="true">#</a> 死亡对象的判断方法</h2><h3 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法" aria-hidden="true">#</a> 引用计数法</h3><p>给对象添加一个计数器：</p><ul><li>有地方引用的时候就将计数器 +1；</li><li>引用失效，将计数器 -1；</li><li>计数器为 0 的对象就是不会再被使用的对象。</li></ul><p>简单高效，但是对象之间存在循环引用，导致他们的计数值都不为 0，无法通知 GC 回收器回收它们。</p><h3 id="可达性分析" tabindex="-1"><a class="header-anchor" href="#可达性分析" aria-hidden="true">#</a> 可达性分析</h3><p>这个算法的基本思想就是通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。</p><h4 id="可以作为-gc-roots-的对象" tabindex="-1"><a class="header-anchor" href="#可以作为-gc-roots-的对象" aria-hidden="true">#</a> 可以作为 GC Roots 的对象</h4><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象；</li><li>本地方法栈（Native 方法）中引用的对象；</li><li>方法区中静态属性引用的变量；</li><li>方法区中常量引用的对象；</li><li>所有被同步锁持有的对象。</li></ul><h4 id="对象可以被回收-就代表一定会被回收吗" tabindex="-1"><a class="header-anchor" href="#对象可以被回收-就代表一定会被回收吗" aria-hidden="true">#</a> 对象可以被回收，就代表一定会被回收吗？</h4><p>即使被标记为不可达的对象，也并不会立即被回收，而是处于”缓刑“阶段，经过真正的宣告对象死亡，至少要经过两次标记过程；</p><p>可达性分析中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 <code>finalize</code> 方法。</p><blockquote><p>对象没有覆盖 <code>finalize</code> 方法，或者 <code>finalize</code> 方法已经被虚拟机调用过，虚拟机把这两种情况视为没有必要执行。</p></blockquote><p>被判断需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象的引用链上的任何一个对象建立关联，否则就会被回收。</p><h3 id="引用类型总结" tabindex="-1"><a class="header-anchor" href="#引用类型总结" aria-hidden="true">#</a> 引用类型总结</h3><ul><li>强引用：必不可少的，垃圾回收器绝对不会回收的对象。</li><li>软引用：可有可无的，内存足够不会回收，如果内存不太够则可能会回收。</li><li>弱引用：可有可无的，与软引用的区别在于：具有弱引用的对象具有更短的声明周期，垃圾回收器一旦发现，不管内存空间是否紧张都会回收这个对象。</li><li>虚引用：形同虚设，虚引用不会决定对象的生命周期，如果一个对象仅持有虚引用，则和没有任何引用一样，任何时候都有可能被回收。</li></ul><p><strong>虚引用主要用来跟踪对象被垃圾回收的活动</strong>。</p><p><strong>虚引用与软引用和弱引用的一个区别在于：</strong> 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p><p>程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p><p>在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为<strong>软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（Out Of Memory）等问题的产生</strong>。</p><h3 id="如何判断一个常量是废弃常量" tabindex="-1"><a class="header-anchor" href="#如何判断一个常量是废弃常量" aria-hidden="true">#</a> 如何判断一个常量是废弃常量？</h3><p><strong>JDK 1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区</strong>，此时 HotSpot 虚拟机对方法区的实现为永久代。</p><p><strong>JDK 1.7 字符串常量池被从方法区拿到了堆中</strong>，这里没有提到运行时常量池，也就是说字符串常量池被单独拿到堆，运行时常量池剩下的东西还在方法区，也就是 HotSpot 中的永久代 。</p><p>JDK 1.8 HotSpot 移除了永久代用元空间（Metaspace）取而代之，这时候<strong>字符串常量池还在堆</strong>，运行时常量池还在方法区，只不过方法区的实现从永久代变成了元空间（Metaspace）。</p><p>假如在字符串常量池中存在字符串 &quot;abc&quot;，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 &quot;abc&quot; 就是废弃常量，如果这时发生内存回收的话而且有必要的话，&quot;abc&quot; 就会被系统清理出常量池。</p><h3 id="如何判断一个类是无用的类" tabindex="-1"><a class="header-anchor" href="#如何判断一个类是无用的类" aria-hidden="true">#</a> 如何判断一个类是无用的类？</h3><p>判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。</p><p>类需要同时满足下面 3 个条件才能算是 <strong>“无用的类”</strong>：</p><ul><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 <code>ClassLoader</code> 已经被回收。</li><li>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。</p><h2 id="垃圾收集算法" tabindex="-1"><a class="header-anchor" href="#垃圾收集算法" aria-hidden="true">#</a> 垃圾收集算法</h2><h3 id="标记-清除算法" tabindex="-1"><a class="header-anchor" href="#标记-清除算法" aria-hidden="true">#</a> 标记-清除算法</h3><p>标记-清除（Mark-and-Sweep）算法分为“标记（Mark）”和“清除（Sweep）”阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。</p><ol><li><strong>效率问题</strong>：标记和清除两个过程效率都不高。</li><li><strong>空间问题</strong>：标记清除后会产生大量不连续的内存碎片。</li></ol><div class="hint-container info"><p class="hint-container-title">三色标记法</p><p>三色指的是：</p><ul><li>白色：尚未被 GC 访问过的对象，如果全部标记已完成依旧为白色的，称为不可达对象，既垃圾对象。</li><li>黑色：本对象已经被 GC 访问过，且本对象的子引用对象也已经被访问过了（本对象的孩子节点也都被访问过）。</li><li>灰色：本对象已访问过，但是本对象的子引用对象还没有被访问过，全部访问完会变成黑色，属于中间态（本对象的孩子节点还没有访问）。</li></ul><p>标记过程：</p><ul><li>初始时，所有对象都为白色；</li><li>将 GC Roots 直接引用到的对象标记为灰色；</li><li>标记到灰色时，将自身标记为黑色，将他引用的子对象标记为灰色；</li><li>重复上述步骤，直至没有灰色对象时结束。</li></ul><p>结束后，白色的对象即为 GC Roots 不可达，可以进行回收。</p><ul><li><strong>多标</strong>：标记到某个灰色对象时，此对象与黑色对象的引用断开，导致此对象为浮动垃圾，但是处于灰色标记 GC 不会对其回收，但是在下次 GC 时仍然会对其进行回收。</li><li><strong>漏标</strong>：灰色对象指向白色对象的引用消失了，然后一个黑色的对象重新引用了白色对象。</li></ul><p>满足以下两个条件中的一个才会导致上述问题。</p><ul><li>赋值器插入了一条或者多条从黑色对象到白色对象的引用。</li><li>赋值器删除了所有的从灰色对象到白色对象的直接引用或者间接引用。</li></ul><p>解决漏标问题的方法：</p><p><strong>增量更新</strong>破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时。就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象作为根对象，再重新扫描一遍，相当于黑色对象变为灰色对象重新扫描。<strong>CMS 采用的方式</strong>。</p><p><strong>原始快照</strong>破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后再将这些记录过的引用关系中的灰色对象为根对象再重新扫描一遍，相当于假设没有断开引用，继续进行扫描，就算原本是垃圾的对象被标记为正常对象，但是下次 GC 时也一定能回收。<strong>G1 采用的方式</strong>。由于是从原本断开的灰色对象为根开始扫描，所以花费的时间相比较增量更新要小。</p><p>黑色对象引用了一个白色对象，那么这个白色只能有一个来源，那就是来自一个灰色对象，原因是其他黑色对象不可能有白色对象，而白色对象没有程序栈，因此它不可能被黑色所在栈访问到，<strong>注意这个白色对象并不是新创建的对象，而是与灰色对象断开的对象，然后它的引用重新指向了一个黑色对象</strong>。</p></div><h3 id="复制算法" tabindex="-1"><a class="header-anchor" href="#复制算法" aria-hidden="true">#</a> 复制算法</h3><p>为了解决标记-清除算法的效率和内存碎片问题，复制（Copying）收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p><p>对应到新生代就是 <code>survivor</code> 中的 <code>from</code> 区和 <code>to</code> 区。</p><p><strong>1.可用内存变小</strong>：可用内存缩小为原来的一半，一半作为 <code>from</code> 区，一半作为 <code>to</code>。</p><p><strong>2.不适合老年代</strong>：如果存活对象数量比较大，复制性能会变得很差。</p><h3 id="分代收集算法-hotspot-为什么要分代" tabindex="-1"><a class="header-anchor" href="#分代收集算法-hotspot-为什么要分代" aria-hidden="true">#</a> 分代收集算法 / HotSpot 为什么要分代</h3><p>当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点选择合适的垃圾收集算法。</p><p>在新生代中，每次收集都有大量对象死去，所以可以采用标记-复制算法，只需要付出少量对象的复制成本就能完成垃圾收集，而老年代中对象存活的久，并且没有额外的空间对它进行分配担保，所以选择标记-清除或标记-整理算法进行垃圾收集。</p><h2 id="垃圾回收器" tabindex="-1"><a class="header-anchor" href="#垃圾回收器" aria-hidden="true">#</a> 垃圾回收器</h2><h3 id="serial-收集器" tabindex="-1"><a class="header-anchor" href="#serial-收集器" aria-hidden="true">#</a> Serial 收集器</h3><p>Serial（串行）收集器是最基本、历史最悠久的垃圾收集器。只会使用一条垃圾收集线程去完成垃圾收集工作，在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ <strong>&quot;Stop The World&quot;</strong> ），直到它收集结束，简单高效。</p><p><img src="'+s+'" alt="image-20230520203719818"></p><p><strong>新生代采用标记-复制算法，老年代采用标记-整理算法。</strong></p><h3 id="serial-old-收集器" tabindex="-1"><a class="header-anchor" href="#serial-old-收集器" aria-hidden="true">#</a> Serial Old 收集器</h3><p><strong>Serial 收集器的老年代版本</strong>，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK 1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。</p><h3 id="parnew-收集器" tabindex="-1"><a class="header-anchor" href="#parnew-收集器" aria-hidden="true">#</a> ParNew 收集器</h3><p>ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。</p><p><img src="'+l+'" alt="image-20230520203818307"></p><p><strong>新生代采用标记-复制算法，老年代采用标记-整理算法</strong>。</p><p>除了 Serial 收集器外，只有它能与 CMS 收集器配合工作。</p><p>并发：一个时间段内同时执行，操作系统基本特征。</p><p>并行：一个时刻同时执行。</p><h3 id="parallel-scavenge-收集器" tabindex="-1"><a class="header-anchor" href="#parallel-scavenge-收集器" aria-hidden="true">#</a> Parallel Scavenge 收集器</h3><p>采用标记-复制算法的多线程收集器，<strong>重点关注吞吐量（高效利用 CPU）</strong>，CMS 垃圾收集器关注的是<strong>停顿时间</strong>。</p><p><img src="'+d+'" alt="image-20230520203801684"></p><p><strong>新生代采用标记-复制算法，老年代采用标记-整理算法。</strong></p><p>JDK 1.8 的默认收集器。</p><h3 id="parallel-old-收集器" tabindex="-1"><a class="header-anchor" href="#parallel-old-收集器" aria-hidden="true">#</a> Parallel Old 收集器</h3><p><strong>Parallel Scavenge 收集器的老年代版本</strong>。使用多线程和“标记-整理”算法。在<strong>注重吞吐量</strong>以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。</p><h3 id="cms-收集器" tabindex="-1"><a class="header-anchor" href="#cms-收集器" aria-hidden="true">#</a> CMS 收集器</h3><p>CMS（Concurrent Mark Sweep）收集器是一种以获取<strong>最短回收停顿时间</strong>为目标的收集器。</p><p><img src="'+p+'" alt="image-20230520204024801"></p><p><strong>CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</strong></p><p>CMS 收集器是一种“<strong>标记-清除</strong>”算法实现的，运行步骤：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li><strong>并发标记：</strong> 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li><strong>并发清除：</strong> 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</li></ul><p>优点：</p><ul><li><strong>并发收集、低停顿</strong>。</li></ul><p>缺点：</p><ul><li><strong>对 CPU 资源敏感；</strong></li><li><strong>无法处理浮动垃圾；</strong>（在并发标记阶段用户新产生的垃圾，在重新标记阶段不会标记浮动的新垃圾）</li><li><strong>它使用的回收算法“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</strong></li></ul><h3 id="g1-收集器" tabindex="-1"><a class="header-anchor" href="#g1-收集器" aria-hidden="true">#</a> G1 收集器</h3><p>G1 (Garbage-First) 是一款面向服务器的垃圾收集器，主要针对配备多颗处理器及大容量内存的机器。 <strong>以极高概率满足 GC 停顿时间要求的同时，还具备高吞吐量性能特征</strong>。</p><p>G1 也是遵循分代收集理论设计的，它不再坚持以固定大小以及固定数量的分代区域划分，而是把连续的 Java 堆划分为多个大小相等的独立区域，每一个 Region 都可以根据需要扮演 Eden 空间、Survivor 空间或者老年代空间。Region 中还有一类特殊的 Humongous 区域，专门用来存储大对象。这些 Humongous 被当作老年代处理。</p><p>G1 有以下特点：</p><ul><li><strong>并行与并发</strong>：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 Java 程序继续执行。</li><li><strong>分代收集</strong>：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</li><li><strong>空间整合</strong>：与 CMS 的“标记-清除”算法不同，<strong>G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。（一个 Region 复制到另外一个 Region）</strong></li><li><strong>可预测的停顿</strong>：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒。</li></ul><p><strong>G1 收集器的运作大致分为以下几个步骤：</strong></p><ul><li><strong>初始标记</strong>：标记一下 GC Roots 能直接关联到的对象。</li><li><strong>并发标记</strong>：遍历对象图，找出需要回收的对象，与用户线程并发执行。处理原始快照在并发时变动的对象。</li><li><strong>最终标记</strong>：处理并发阶段结束后仍遗留下来的少量 SATB 记录。</li><li><strong>筛选回收</strong>：更新 Region 的统计数据，对各个 Region 的回收价值和成本进行排序，然后根据用户的期望停顿时间制定回收计划，最后把需要回收的 Region 里的存活对象复制到新 Region 中，再清空旧 Region。需要 STW，多条收集线程并发执行。</li></ul><p><img src="'+g+'" alt="image-20230520204132639"></p><p><strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region（这也就是它的名字 Garbage-First 的由来）</strong> 。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p><p><strong>G1 存在着的问题：</strong></p><ol><li>跨代引用的问题。在判断对象是否可达的时候，需要对每个 Region 都维护一个 Remember Set，内存占用是非常高的。</li><li>浮动垃圾。为每个 Region 设置两个 TAMS 指针，新对象都分配在这个两个指针之间，默认认为这些新对象不是垃圾。如果回收速度赶不上分配速度，也会导致冻结用户线程，进行 Full GC。</li></ol><h2 id="cms-和-g1-的异同" tabindex="-1"><a class="header-anchor" href="#cms-和-g1-的异同" aria-hidden="true">#</a> CMS 和 G1 的异同</h2><p>首先 CMS 是老年代的收集器，一般配合 ParNew 使用，但是这个组合在 G1 出现后已经被废弃了。G1 面向整堆进行收集。</p><p><strong>CMS 采用标记清除算法，因此会产生内存碎片，导致 Concurrent mode failure 进而 Full GC。</strong></p><p><strong>G1 宏观上采用标记整理，但是微观上是在各个 Region 之间标记复制，所以降低了内存碎片的产生数量。</strong></p><p>再就是二者的回收过程不同，CMS 大致可以分为初始标记、并发标记、重新标记和并发清理；G1 大致可以分为初始标记、并发标记、重新标记和清除。这二者在针对并发标记过程中用户线程对可达性分析的影响的处理方式不同，<strong>一个是增量更新（CMS），一个是原始快照（G1）。</strong></p><p>CMS 和 G1 都是响应时间优先的收集器，但是 CMS 是追求最小的停顿时间为目标，而 G1 通过衰减均值来建立可预测的停顿模型，也就是分析每个 Region 的回收收益，根据均值、标准差、置信度等指标来决定到底要收集哪些 Region，并且收集这些 Region 所需的停顿时间要大概率不超过期望的停顿时间。</p><h2 id="到底多大的对象会被直接扔到老年代" tabindex="-1"><a class="header-anchor" href="#到底多大的对象会被直接扔到老年代" aria-hidden="true">#</a> 到底多大的对象会被直接扔到老年代</h2><p>用 <code>-XX: PretunureSizeThreshold</code> 指定对象大小的阈值，超过这个数就直接放入老年代，减少内存复制开销。但是这个参数只支持 Serial 和 ParNew。像 G1 的话，只要对象大小超过 Region 的一半，那就会直接放到 Humongous 里，这个 Humongous 也被认为是老年代。</p><h2 id="cms-和-g1-的-stw-的区别" tabindex="-1"><a class="header-anchor" href="#cms-和-g1-的-stw-的区别" aria-hidden="true">#</a> CMS 和 G1 的 STW 的区别</h2><p>首先，根节点枚举都是需要 STW 的（初始标记阶段），CMS 和 G1 在根节点枚举上的区别就在于处理跨代引用上，跨代引用一般是使用记忆集解决，G1 的记忆集和 CMS 的不一样，因为 G1 的分区是按 Region 分的，因此 G1 的记忆集是一个哈希表，key 是别的 Region 的起始地址，value 是一个集合，里面存储的是卡表的索引号。这个哈希表表示我指向谁，谁又指向我的，是一种双向卡表。而 CMS 的卡表比较简单，只标识着老年代的对象是否存在新生代对象的引用。</p><p>然后 <strong>CMS 在可达性分析的时候有两个步骤需要 STW，一个是初始标记，一个是重新标记；G1 有三个步骤需要 STW，一个是初始标记，一个是最终标记，还有一个是筛选回收</strong>。初始标记就是将 GC Roots 直接引用的对象标记一遍，速度很快；这二者都存在一个并发标记的步骤，此时与用户线程并发执行，难免用户线程会修改对象图的引用关系。两个收集器的处理策略是不同的，CMS 采用的是增量更新，G1 则采用的是原始快照。</p><p>增量更新就是将那些新加入引用的位置记录，在重新标记阶段进行处理。原始快照就是将那些被删除的引用记录保存下来，也就是保存个快照，在并发标记的最后以及最终标记中进行处理。</p>',117);function C(G,S){return a(),o("div",null,[c,i(" more "),u])}const M=e(h,[["render",C],["__file","2gc.html.vue"]]);export{M as default};

const l=JSON.parse('{"key":"v-42365a57","path":"/framework/1spring/0spring.html","title":"Spring","lang":"zh-CN","frontmatter":{"title":"Spring","icon":"page","category":["框架"],"tag":["Spring","八股"]},"headers":[{"level":2,"title":"Spring是什么","slug":"spring是什么","link":"#spring是什么","children":[]},{"level":2,"title":"单例Bean是单例设计模式吗？","slug":"单例bean是单例设计模式吗","link":"#单例bean是单例设计模式吗","children":[]},{"level":2,"title":"什么是单例池？作用是什么？","slug":"什么是单例池-作用是什么","link":"#什么是单例池-作用是什么","children":[]},{"level":2,"title":"Spring中的设计模式","slug":"spring中的设计模式","link":"#spring中的设计模式","children":[]},{"level":2,"title":"Spring中Bean创建的生命周期","slug":"spring中bean创建的生命周期","link":"#spring中bean创建的生命周期","children":[{"level":3,"title":"Bean初始化和实例化的区别是什么？","slug":"bean初始化和实例化的区别是什么","link":"#bean初始化和实例化的区别是什么","children":[]},{"level":3,"title":"初始化后是什么？","slug":"初始化后是什么","link":"#初始化后是什么","children":[]},{"level":3,"title":"Bean对象和普通对象之间的区别是什么","slug":"bean对象和普通对象之间的区别是什么","link":"#bean对象和普通对象之间的区别是什么","children":[]},{"level":3,"title":"@PostConstruct是如何工作的","slug":"postconstruct是如何工作的","link":"#postconstruct是如何工作的","children":[]},{"level":3,"title":"构造方法推断","slug":"构造方法推断","link":"#构造方法推断","children":[]},{"level":3,"title":"先ByType再ByName","slug":"先bytype再byname","link":"#先bytype再byname","children":[]}]},{"level":2,"title":"Spring事务","slug":"spring事务","link":"#spring事务","children":[{"level":3,"title":"事务实现原理","slug":"事务实现原理","link":"#事务实现原理","children":[]},{"level":3,"title":"Spring事务传播机制","slug":"spring事务传播机制","link":"#spring事务传播机制","children":[]},{"level":3,"title":"Spring事务失效的原因","slug":"spring事务失效的原因","link":"#spring事务失效的原因","children":[]}]},{"level":2,"title":"SpringAOP怎么工作的？","slug":"springaop怎么工作的","link":"#springaop怎么工作的","children":[]},{"level":2,"title":"Spring为什么要使用三级缓存来解决循环依赖？","slug":"spring为什么要使用三级缓存来解决循环依赖","link":"#spring为什么要使用三级缓存来解决循环依赖","children":[]},{"level":2,"title":"Spring框架中的Bean是线程安全的吗？","slug":"spring框架中的bean是线程安全的吗","link":"#spring框架中的bean是线程安全的吗","children":[]},{"level":2,"title":"ApplicationContext和BeanFactory有什么区别？","slug":"applicationcontext和beanfactory有什么区别","link":"#applicationcontext和beanfactory有什么区别","children":[]},{"level":2,"title":"Spring容器的启动流程","slug":"spring容器的启动流程","link":"#spring容器的启动流程","children":[]}],"git":{"createdTime":1687158105000,"updatedTime":1687862793000,"contributors":[{"name":"ZYL1210","email":"870138612@qq.com","commits":13}]},"readingTime":{"minutes":10.54,"words":3163},"filePathRelative":"framework/1spring/0spring.md","localizedDate":"2023年6月19日","excerpt":"<h2> Spring是什么</h2>\\n<p>Spring是一个轻量级的控制反转（Ioc）和面向切面（AOP）的容器框架。</p>\\n<ul>\\n<li>从大小和开销两方面而言Spring是轻量级的。</li>\\n<li>通过控制反转的技术达到松耦合。</li>\\n<li>提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务进行内聚性的开发。</li>\\n<li>包含和管理应用对象的配置和声明周期，通过容器实现。</li>\\n<li>将简单的配置组件组合成复杂的应用。</li>\\n</ul>\\n<h2> 单例Bean是单例设计模式吗？</h2>\\n<p>单例模式指的是在JVM中一个类只能构造出一个实例对象，有很多单例模式的实现方法例如双检查法（懒汉式），静态代码块（饿汉式）。</p>"}');export{l as data};

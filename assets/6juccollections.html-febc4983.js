const e=JSON.parse('{"key":"v-169e4648","path":"/java/3juc/6juccollections.html","title":"JUC常见并发容器","lang":"zh-CN","frontmatter":{"title":"JUC常见并发容器","icon":"page","category":["Java"],"tag":["JUC常见并发容器","八股"],"description":"JDK 提供的这些容器大部分在 java.util.concurrent 包中。 ConcurrentHashMap : 线程安全的 HashMap CopyOnWriteArrayList : 线程安全的 List，在读多写少的场合性能非常好，远远好于 Vector。 ConcurrentLinkedQueue : 高效的并发队列，使用链表实现。可以看做一个线程安全的 LinkedList，这是一个非阻塞队列。 BlockingQueue : 这是一个接口，JDK 内部通过链表、数组等方式实现了这个接口。表示阻塞队列，非常适合用于作为数据共享的通道。 ConcurrentSkipListMap : 跳表的实现。这是一个 Map，使用跳表的数据结构进行快速查找。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/java/3juc/6juccollections.html"}],["meta",{"property":"og:site_name","content":"LIANG"}],["meta",{"property":"og:title","content":"JUC常见并发容器"}],["meta",{"property":"og:description","content":"JDK 提供的这些容器大部分在 java.util.concurrent 包中。 ConcurrentHashMap : 线程安全的 HashMap CopyOnWriteArrayList : 线程安全的 List，在读多写少的场合性能非常好，远远好于 Vector。 ConcurrentLinkedQueue : 高效的并发队列，使用链表实现。可以看做一个线程安全的 LinkedList，这是一个非阻塞队列。 BlockingQueue : 这是一个接口，JDK 内部通过链表、数组等方式实现了这个接口。表示阻塞队列，非常适合用于作为数据共享的通道。 ConcurrentSkipListMap : 跳表的实现。这是一个 Map，使用跳表的数据结构进行快速查找。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-18T13:00:51.000Z"}],["meta",{"property":"article:author","content":"ZYL1210"}],["meta",{"property":"article:tag","content":"JUC常见并发容器"}],["meta",{"property":"article:tag","content":"八股"}],["meta",{"property":"article:modified_time","content":"2023-05-18T13:00:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC常见并发容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-18T13:00:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZYL1210\\",\\"url\\":\\"https://localhost\\"}]}"]]},"headers":[{"level":2,"title":"CopyOnWriteArrayList","slug":"copyonwritearraylist","link":"#copyonwritearraylist","children":[{"level":3,"title":"CopyOnWriteArrayList 原理","slug":"copyonwritearraylist-原理","link":"#copyonwritearraylist-原理","children":[]}]},{"level":2,"title":"ConcurrentLinkedQueue","slug":"concurrentlinkedqueue","link":"#concurrentlinkedqueue","children":[]},{"level":2,"title":"BlockingQueue","slug":"blockingqueue","link":"#blockingqueue","children":[{"level":3,"title":"ArrayBlockingQueue","slug":"arrayblockingqueue","link":"#arrayblockingqueue","children":[]},{"level":3,"title":"LinkedBlockingQueue","slug":"linkedblockingqueue","link":"#linkedblockingqueue","children":[]},{"level":3,"title":"PriorityBlockingQueue","slug":"priorityblockingqueue","link":"#priorityblockingqueue","children":[]}]},{"level":2,"title":"ConcurrentSkipListMap","slug":"concurrentskiplistmap","link":"#concurrentskiplistmap","children":[]}],"git":{"createdTime":1684414851000,"updatedTime":1684414851000,"contributors":[{"name":"ZYL1210","email":"870138612@qq.com","commits":1}]},"readingTime":{"minutes":4.01,"words":1203},"filePathRelative":"java/3juc/6juccollections.md","localizedDate":"2023年5月18日","excerpt":"<p>JDK 提供的这些容器大部分在 <code>java.util.concurrent</code> 包中。</p>\\n<ul>\\n<li><strong><code>ConcurrentHashMap</code></strong> : 线程安全的 <code>HashMap</code></li>\\n<li><strong><code>CopyOnWriteArrayList</code></strong> : 线程安全的 <code>List</code>，在读多写少的场合性能非常好，远远好于 <code>Vector</code>。</li>\\n<li><strong><code>ConcurrentLinkedQueue</code></strong> : 高效的并发队列，使用链表实现。可以看做一个线程安全的 <code>LinkedList</code>，这是一个非阻塞队列。</li>\\n<li><strong><code>BlockingQueue</code></strong> : 这是一个接口，JDK 内部通过链表、数组等方式实现了这个接口。表示阻塞队列，非常适合用于作为数据共享的通道。</li>\\n<li><strong><code>ConcurrentSkipListMap</code></strong> : 跳表的实现。这是一个 Map，使用跳表的数据结构进行快速查找。</li>\\n</ul>\\n","autoDesc":true}');export{e as data};

import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c,a as n,b as s,f as e,d as l,e as t}from"./app-a6a794c8.js";const r={},d=n("p",null,"八股经历大约两个月终于是啃（抄）完了，该换点活的东西看看了，以下就针对三个项目进行复习。",-1),u={href:"https://www.bilibili.com/video/BV1np4y1C7Yf/?spm_id_from=333.337.search-card.all.click&vd_source=90bb400ad92a9344bb4c2ca0d7921be7",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=333.337.search-card.all.click&vd_source=90bb400ad92a9344bb4c2ca0d7921be7",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.bilibili.com/video/BV1hq4y1F7zk/?spm_id_from=333.337.search-card.all.click&vd_source=90bb400ad92a9344bb4c2ca0d7921be7",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"谷粒商城",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#谷粒商城","aria-hidden":"true"},"#"),s(" 谷粒商城")],-1),b={href:"https://www.jcwang.top/2022/10/14/%E6%88%91%E7%9A%84%E7%A7%8B%E6%8B%9B%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>首先是简历部分：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>恐龙商城                                                                  2022.3-2022.8
springcloud，springboot，mybatis，redis，rabbitmq，sentinel，nginx, docker
商城页面由Nginx代理实现动静分离，请求负载均衡，拆分为网关，订单，秒杀等微服务。
实现单点登录，商品缓存快速查询，秒杀遵从服务单一职责，独立部署，定时上架，库存预热快速扣减，秒杀连接加密，恶意请求拦截，流量错峰，后端限流，队列削峰。
● 网关微服务实现集群状态下的负载均衡，使得来自同一个主域名的不同请求分发到对应的微服务。
● Redis存储Token，完成多微服务下的用户登录验证和状态刷新。
● SpringSchedule定时任务上架秒杀商品。
● 前端限流，后端验证登录，Sentinel框架熔断降级的流量错峰保证在高流量的情况下保持项目稳定。
● Redis验证秒杀中的一人一单，信号量Semephore实现库存的快速扣减，解决并发安全问题。
● RabbitMq完成秒杀订单创建，实现队列削峰，减少数据库压力，采用手动ack确保订单创建成功。
● RabbitMq延时队列模拟订单过期，过期订单的解锁订单和解锁库存通过RabbitMq消息队列实现。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面逐句进行分析。</p><h2 id="介绍下项目的技术选型" tabindex="-1"><a class="header-anchor" href="#介绍下项目的技术选型" aria-hidden="true">#</a> 介绍下项目的技术选型</h2><p>项目中使用到的技术栈为<strong>springcloud</strong>，<strong>springboot</strong>，<strong>mybatis</strong>，<strong>redis</strong>，<strong>rabbitmq</strong>，<strong>sentinel</strong>，<strong>nginx</strong>，<strong>docker</strong>，使用<strong>springcloud（Nacos</strong>作为注册中心和配置中心，简化多服务器的管理，并将项目拆分为多个微服务（模块），微服务之间使用<strong>OpenFeign</strong>调用，<strong>mybatis</strong>作为数据库框架，<strong>redis</strong>作为缓存，分布式锁，<strong>rabbitmq</strong>用来队列削峰，<strong>sentinel</strong>用来熔断降级限流，主要用在秒杀部分，<strong>nginx</strong>用来动静分离，<strong>docker</strong>容器化部署，<strong>zipkin</strong>用作链路追踪，分析请求到每个模块的运行耗时。</p><h2 id="商城页面由nginx代理实现动静分离-请求负载均衡" tabindex="-1"><a class="header-anchor" href="#商城页面由nginx代理实现动静分离-请求负载均衡" aria-hidden="true">#</a> 商城页面由Nginx代理实现动静分离，请求负载均衡</h2><h3 id="nginx反向代理在计算机网络的第几层" tabindex="-1"><a class="header-anchor" href="#nginx反向代理在计算机网络的第几层" aria-hidden="true">#</a> Nginx反向代理在计算机网络的第几层？</h3><p>Nginx反向代理包含7层反向代理（应用层）和4层反向代理（传输层）两种。</p><p>7层代理是写在http模块中的，而4层代理是写在stream模块中，与http模块并列。</p><p>4层代理是基于<strong>ip和端口</strong>转发的，基于<strong>TCP/UDP</strong>协议。</p><p>7层代理可以 基于<strong>url和ip以及cookie和请求头</strong>进行分流。</p><p><strong>七层代理写法：</strong></p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token comment"># 写在http模块中基于内容和协议的交换 nginx代理服务器其实建立了两次TCP连接</span>
    <span class="token directive"><span class="token keyword">upstream</span> web</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">server</span> 192.168.1.100:80</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:80</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://web</span><span class="token punctuation">;</span>              
            <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>四层代理写法：</strong></p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">stream</span></span> <span class="token punctuation">{</span>
    <span class="token comment"># 写在stream中 基于ip和端口进行转发 实际上是修改了请求头中的目标ip和端口</span>
	<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
		<span class="token directive"><span class="token keyword">listen</span> <span class="token number">30028</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> appserver</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">upstream</span> appserver</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">server</span> 10.0.0.12:8080</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> 10.0.0.13:8080</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4层代理设备将client发送报文中的目标地址（原来为4层代理的ip地址）修改为目标内部服务器的地址，这样client就可以和server建立TCP连接并发送数据。 在stream中，server一定要配置port，proxy_pass配置行直接加集群名，**不能加http:// **。</p><blockquote><p>在本项目中，upstream使用的是七层代理的配置方法。</p></blockquote><h3 id="nginx的负载均衡算法有哪些" tabindex="-1"><a class="header-anchor" href="#nginx的负载均衡算法有哪些" aria-hidden="true">#</a> Nginx的负载均衡算法有哪些？</h3>`,18),h={href:"https://ylzhong.top/middleware/1nginx.html#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"负载均衡策略有：轮训，最小连接，ip_hash，hash，权重，随机。",-1),w=n("h3",{id:"nginx动静分离",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nginx动静分离","aria-hidden":"true"},"#"),s(" Nginx动静分离")],-1),y=n("p",null,"项目编译完成之后会产生一些不会发生变化的静态文件，放入到nginx的html目录下，通过nginx配置进行获取这些静态文件，后端tomcat服务器应该用来处理请求而不是返回这些静态数据。开启nginx缓冲（buffer）之后还能解决高并发下的连接积压问题（server端到nginx端的连接）。",-1),_=n("h3",{id:"nginx反向代理怎么配置的-反向代理跟正向代理的区别是什么-nginx可以配置正向代理吗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nginx反向代理怎么配置的-反向代理跟正向代理的区别是什么-nginx可以配置正向代理吗","aria-hidden":"true"},"#"),s(" Nginx反向代理怎么配置的？反向代理跟正向代理的区别是什么？nginx可以配置正向代理吗？")],-1),f={href:"https://ylzhong.top/middleware/1nginx.html#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86",target:"_blank",rel:"noopener noreferrer"},q=t(`<ul><li>反向代理通过在location里添加<code>proxy_pass</code>进行请求代理</li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token comment"># 写在http模块中基于内容和协议的交换 nginx代理服务器其实建立了两次TCP连接</span>
    <span class="token directive"><span class="token keyword">upstream</span> web</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">server</span> 192.168.1.100:80</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> 192.168.1.101:80</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://web</span><span class="token punctuation">;</span>              
            <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>正向代理通过客户端代理转发请求，例如VPN。反向代理通过服务端代理转发请求例如Nginx反向代理。</p></li><li><p>Nginx可以配置正向代理，例如A能访问外网，BCD不能访问外网但是能访问A，则可以通过正向代理将请求代理转发给A进行外网访问。（类似VPN代理模式）</p></li></ul><h2 id="拆分为网关-订单-秒杀等微服务" tabindex="-1"><a class="header-anchor" href="#拆分为网关-订单-秒杀等微服务" aria-hidden="true">#</a> 拆分为网关，订单，秒杀等微服务</h2><h3 id="分微服务的原则是什么" tabindex="-1"><a class="header-anchor" href="#分微服务的原则是什么" aria-hidden="true">#</a> 分微服务的原则是什么？</h3><ol><li><p><strong>单一职责原则</strong>：每个微服务应该只负责一个特定的业务功能。例如网关微服务只用来做请求转发，秒杀微服务只做秒杀，即使因为高流量导致秒杀微服务宕机也不会影响到正常的订单微服务。</p></li><li><p><strong>业务领域驱动划分</strong>：根据应用程序的业务需求和领域知识来对服务进行划分。同上，每一个微服务需要做的业务清晰明了。</p></li><li><p><strong>最小可行服务</strong>：在进行微服务划分时，应该尽量保持服务的粒度足够小，以降低系统复杂性和提高灵活性。拆分成微服务之后，各个微服务之间的调用变得更加灵活。</p></li><li><p><strong>高内聚低耦合</strong>：微服务划分应该追求高内聚低耦合的原则。各个微服务之间的耦合度应该尽可能的小。</p></li><li><p><strong>数据自治原则</strong>：每个微服务应该对其所使用的数据有完全的控制权。每一个微服务都对自己所属的数据库架构有完全控制权。</p></li><li><p><strong>技术多样性</strong>：微服务架构允许使用不同的技术栈来实现不同的服务。</p></li></ol><h2 id="实现单点登录" tabindex="-1"><a class="header-anchor" href="#实现单点登录" aria-hidden="true">#</a> 实现单点登录</h2><h3 id="单点登录怎么实现的" tabindex="-1"><a class="header-anchor" href="#单点登录怎么实现的" aria-hidden="true">#</a> 单点登录怎么实现的？</h3><p>使用SpringSecurity框架实现。</p><p>首先需要考虑用户的数据应该存储在哪。</p><ul><li><p>如果使用session保存用户数据则会导致其他的服务器无法获取用户数据。</p></li><li><p>如果使用cookie存储用户数据，由于cookie存储在客户端，容易篡改，不安全。</p></li><li><p>采用nginx的hash一致性负载均衡算法，让所有来源相同的请求定位到同一个服务器，但是如果服务器宕机，则数据会丢失，不可行。</p></li></ul><p>本项目使用<code>Redis</code>进行用户数据统一存储。添加依赖之后将session存储方式改为redis。</p><blockquote><p>项目课程中使用SpringSession进行登录数据存储，后续改为SpringSecurity框架实现认证授权功能。</p></blockquote><p>在配置类中添加了<code>jwtAuthenticationTokenFilter(OncePerRequestFilter的实现类，每次请求都会拦截)</code>，和<code>UsernamePasswordAuthenticationFilter.class</code>。</p><p>其中<strong>登录的密码查询</strong>是需要自己去实现接口<code>UserDetailsService</code>，并重写方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token comment">//根据用户名查询用户信息</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//判断是否查到用户 如果没有查到则抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;用户不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//TODO 查询权限信息封装</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值为实现接口<code>UserDetails</code>的LoginUser类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Authentication</span> authenticate <span class="token operator">=</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过UserDetails实现类查询用户账号和密码，并进行认证</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>密码编码器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Bean</span>
 <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>认证整体流程：</p><ol><li><p>用户提交用户名、密码被<code>SecurityFilterChain</code>中的 <code>UsernamePasswordAuthenticationFilter</code>过滤器获取到， 封装为请求<code>Authentication</code>，通常情况下是<code>UsernamePasswordAuthenticationToken</code>这个实现类。</p></li><li><p>然后过滤器将<code>Authentication</code>提交至认证管理器（<code>AuthenticationManager</code>）进行认证，通过<code>UserDetailsService</code>实现类获取包含用户账号密码的<code>UserDetails</code>实现类 ，密码对比过<code>PasswordEncoder</code>实现类<code>BCryptPasswordEncoder</code>完成，认证成功则返回<code>Authentication</code>，否则返回空。</p></li><li><p>认证成功之后通过userId生成JWT返回给前端，封装用户部分数据保存到Redis中，Redis数据的key是<code>&quot;LOGIN:&quot;+userId</code>。</p></li><li><p><code>SecurityContextHolder</code> 安全上下文容器将第2步填充了信息的 <code>Authentication</code> ，通过 <code>SecurityContextHolder.getContext().setAuthentication(…)</code>方法，设置到其中。</p></li></ol><p><code>SecurityContextHolder</code>可以看成一个<code>ThreadLocal</code>用来在一次会话中共享数据。</p><p>上述流程在分布式下有时候不能保持登录状态，可以将用户数据保存至Redis中。</p><p><strong>分布式下的用户登录状态保持：</strong></p><p>第二次会话时开启新的线程就会导致不能获取之前的用户数据，不能保持登录状态。</p><p>在第二步认证成功之后通过userId生成JWT返回给前端，封装用户部分数据保存到Redis中，Redis数据的key是<code>&quot;LOGIN:&quot;+userId</code>。</p><p>添加<code>OncePerRequestFilter</code>过滤器，每次请求都会被拦截。如果请求中没有携带token则表示是不需要登录的请求，直接放行，携带了token通过JWT工具类进行解密获得userId，如果解密为有效的userId，则可以作为key（<code>&quot;LOGIN:&quot;+userId</code>）去Redis中找到用户数据，并添加到<code>SecurityContextHolder</code>中，这样只要客户端保存正确的token就能保持登录状态。</p><p>登录状态续期可以通过给Redis添加新的过期时间进行续期。</p><h3 id="如果想要用户仅仅在一段时间内免登录怎么办" tabindex="-1"><a class="header-anchor" href="#如果想要用户仅仅在一段时间内免登录怎么办" aria-hidden="true">#</a> 如果想要用户仅仅在一段时间内免登录怎么办？</h3><p>在<code>OncePerRequestFilter</code>过滤器添加Redis数据的时候加上过期时间，在通过key（<code>&quot;LOGIN:&quot;+userId</code>）获取Redis数据失败的时候则认为是用户的免登录时间已经过期。（用户数据在Redis中过期，则需要重新登录并将用户数据保存至Redis，返回新的Token）</p><h3 id="jwt-token-如何生成的" tabindex="-1"><a class="header-anchor" href="#jwt-token-如何生成的" aria-hidden="true">#</a> JWT（Token）如何生成的？</h3>`,32),E={href:"https://www.bilibili.com/video/BV1cK4y197EM/?spm_id_from=333.788.recommend_more_video.1&vd_source=90bb400ad92a9344bb4c2ca0d7921be7",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>使用JJWT生成JWT。</p><p>JWT由三个部分构成，用<code>.</code>拼接：</p><ul><li><p>Header，包含类型和加密算法，此部分通过BASE64加密之后得到第一个部分（需要一个Key作为秘钥）。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;typ&quot;</span><span class="token operator">:</span>&quot;jwt<span class="token punctuation">,</span>
    <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span><span class="token string">&quot;HS256&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Payload，载荷，用于存放主要信息，通过BASE64加密之后得到TOKEN的第二个部分。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;sub&quot;</span><span class="token operator">:</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;zyl&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Signature，通过对Header和Payload进行再次加密得到的数据再通过HS256加盐得到最终的Signature。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> encodedString <span class="token operator">=</span> <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">+</span> <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> signature <span class="token operator">=</span> <span class="token function">HMACSHA256</span><span class="token punctuation">(</span>encodedString<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>​ 最后HS256加盐算法中的秘钥也可以通过BASE64加密获得。</p>`,4);function A(B,N){const a=i("ExternalLinkIcon");return p(),c("div",null,[d,n("p",null,[s("包含"),n("a",u,[s("谷粒商城"),e(a)]),s("，"),n("a",k,[s("黑马点评"),e(a)]),s("，"),n("a",v,[s("三更博客"),e(a)]),s("。（点击跳转B站网课）")]),l(" more "),m,n("p",null,[s("项目整体较为复杂，项目中可能会涉及到的疑问点参考诚哥的博客文章"),n("a",b,[s("秋招笔记整理"),e(a)]),s("。")]),g,n("p",null,[s("详见☀️"),n("a",h,[s("Nginx负载均衡"),e(a)])]),x,w,y,_,n("p",null,[s("详见☀️"),n("a",f,[s("正向代理和反向代理"),e(a)])]),q,n("p",null,[s("详见☀️"),n("a",E,[s("15分钟学会JWT的使用"),e(a)])]),S])}const T=o(r,[["render",A],["__file","0aboutprojects.html.vue"]]);export{T as default};

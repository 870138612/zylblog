const n=JSON.parse('{"key":"v-4e1ade5e","path":"/discovery/computer/1net.html","title":"计算机网络","lang":"zh-CN","frontmatter":{"title":"计算机网络","icon":"net","category":["计算机基础"],"tag":["计算机网络"]},"headers":[{"level":2,"title":"常见的网络协议","slug":"常见的网络协议","link":"#常见的网络协议","children":[{"level":3,"title":"应用层","slug":"应用层","link":"#应用层","children":[]},{"level":3,"title":"传输层","slug":"传输层","link":"#传输层","children":[]},{"level":3,"title":"网络层","slug":"网络层","link":"#网络层","children":[]}]},{"level":2,"title":"GET 和 POST 的区别","slug":"get-和-post-的区别","link":"#get-和-post-的区别","children":[]},{"level":2,"title":"PUT 和 POST 的区别","slug":"put-和-post-的区别","link":"#put-和-post-的区别","children":[]},{"level":2,"title":"HTTP","slug":"http","link":"#http","children":[{"level":3,"title":"从输入 URL 到页面展示到底发生了什么？","slug":"从输入-url-到页面展示到底发生了什么","link":"#从输入-url-到页面展示到底发生了什么","children":[]},{"level":3,"title":"HTTP 状态码","slug":"http-状态码","link":"#http-状态码","children":[]},{"level":3,"title":"HTTPS 与 HTTP 的区别","slug":"https-与-http-的区别","link":"#https-与-http-的区别","children":[]},{"level":3,"title":"HTTP 1.0、HTTP 1.1 和 HTTP 2.0","slug":"http-1-0、http-1-1-和-http-2-0","link":"#http-1-0、http-1-1-和-http-2-0","children":[]},{"level":3,"title":"SSL/TLS 协议","slug":"ssl-tls-协议","link":"#ssl-tls-协议","children":[]},{"level":3,"title":"RPC 框架的工作原理","slug":"rpc-框架的工作原理","link":"#rpc-框架的工作原理","children":[]},{"level":3,"title":"一次 RPC 的调用流程","slug":"一次-rpc-的调用流程","link":"#一次-rpc-的调用流程","children":[]},{"level":3,"title":"有了 HTTP 为什么还需要 RPC","slug":"有了-http-为什么还需要-rpc","link":"#有了-http-为什么还需要-rpc","children":[]},{"level":3,"title":"有了 HTTP 为什么还要有 WebSocket？","slug":"有了-http-为什么还要有-websocket","link":"#有了-http-为什么还要有-websocket","children":[]},{"level":3,"title":"URI 和 URL 的区别","slug":"uri-和-url-的区别","link":"#uri-和-url-的区别","children":[]}]},{"level":2,"title":"DNS","slug":"dns","link":"#dns","children":[{"level":3,"title":"DNS 的作用是什么？","slug":"dns-的作用是什么","link":"#dns-的作用是什么","children":[]},{"level":3,"title":"DNS 服务器有哪些？","slug":"dns-服务器有哪些","link":"#dns-服务器有哪些","children":[]}]},{"level":2,"title":"TCP 与 UDP","slug":"tcp-与-udp","link":"#tcp-与-udp","children":[{"level":3,"title":"TCP 与 UDP 的区别","slug":"tcp-与-udp-的区别","link":"#tcp-与-udp-的区别","children":[]},{"level":3,"title":"什么时候选择 TCP，什么时候选 UDP？","slug":"什么时候选择-tcp-什么时候选-udp","link":"#什么时候选择-tcp-什么时候选-udp","children":[]},{"level":3,"title":"HTTP 基于 TCP 还是 UDP？","slug":"http-基于-tcp-还是-udp","link":"#http-基于-tcp-还是-udp","children":[]},{"level":3,"title":"使用 TCP 的协议有哪些？使用 UDP 的协议有哪些？","slug":"使用-tcp-的协议有哪些-使用-udp-的协议有哪些","link":"#使用-tcp-的协议有哪些-使用-udp-的协议有哪些","children":[]}]},{"level":2,"title":"TCP 三次握手和四次挥手（传输层）","slug":"tcp-三次握手和四次挥手-传输层","link":"#tcp-三次握手和四次挥手-传输层","children":[{"level":3,"title":"建立连接 - TCP三次握手","slug":"建立连接-tcp三次握手","link":"#建立连接-tcp三次握手","children":[]},{"level":3,"title":"为什么要三次握手？","slug":"为什么要三次握手","link":"#为什么要三次握手","children":[]},{"level":3,"title":"断开连接 - TCP 四次挥手","slug":"断开连接-tcp-四次挥手","link":"#断开连接-tcp-四次挥手","children":[]},{"level":3,"title":"为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？","slug":"为什么不能把服务器发送的-ack-和-fin-合并起来-变成三次挥手","link":"#为什么不能把服务器发送的-ack-和-fin-合并起来-变成三次挥手","children":[]},{"level":3,"title":"为什么第四次挥手客户端需要等待 2*MSL（报文段最长寿命）时间后才进入 CLOSED 状态？","slug":"为什么第四次挥手客户端需要等待-2-msl-报文段最长寿命-时间后才进入-closed-状态","link":"#为什么第四次挥手客户端需要等待-2-msl-报文段最长寿命-时间后才进入-closed-状态","children":[]}]},{"level":2,"title":"TCP 传输可靠性保障（传输层）","slug":"tcp-传输可靠性保障-传输层","link":"#tcp-传输可靠性保障-传输层","children":[{"level":3,"title":"TCP 如何保证传输的可靠性？","slug":"tcp-如何保证传输的可靠性","link":"#tcp-如何保证传输的可靠性","children":[]},{"level":3,"title":"TCP 如何实现流量控制？","slug":"tcp-如何实现流量控制","link":"#tcp-如何实现流量控制","children":[]},{"level":3,"title":"TCP 的拥塞控制是怎么实现的？","slug":"tcp-的拥塞控制是怎么实现的","link":"#tcp-的拥塞控制是怎么实现的","children":[]}]},{"level":2,"title":"ARQ 协议","slug":"arq-协议","link":"#arq-协议","children":[{"level":3,"title":"停止等待协议","slug":"停止等待协议","link":"#停止等待协议","children":[]},{"level":3,"title":"后退N帧协议（GBN）","slug":"后退n帧协议-gbn","link":"#后退n帧协议-gbn","children":[]},{"level":3,"title":"选择重传协议（SR）","slug":"选择重传协议-sr","link":"#选择重传协议-sr","children":[]}]},{"level":2,"title":"IP（网络层）","slug":"ip-网络层","link":"#ip-网络层","children":[{"level":3,"title":"IP 协议的作用是什么？","slug":"ip-协议的作用是什么","link":"#ip-协议的作用是什么","children":[]},{"level":3,"title":"什么是 IP 地址？IP 寻址如何工作？","slug":"什么是-ip-地址-ip-寻址如何工作","link":"#什么是-ip-地址-ip-寻址如何工作","children":[]},{"level":3,"title":"IPv4 和 IPv6 有什么区别？","slug":"ipv4-和-ipv6-有什么区别","link":"#ipv4-和-ipv6-有什么区别","children":[]},{"level":3,"title":"NAT 作用是什么？","slug":"nat-作用是什么","link":"#nat-作用是什么","children":[]}]},{"level":2,"title":"ARP","slug":"arp","link":"#arp","children":[{"level":3,"title":"什么是 MAC 地址？","slug":"什么是-mac-地址","link":"#什么是-mac-地址","children":[]},{"level":3,"title":"ARP 协议解决了什么问题？","slug":"arp-协议解决了什么问题","link":"#arp-协议解决了什么问题","children":[]}]}],"git":{"createdTime":1693508810000,"updatedTime":1694156763000,"contributors":[{"name":"ZYL1210","email":"870138612@qq.com","commits":6}]},"readingTime":{"minutes":33.27,"words":9981},"filePathRelative":"discovery/computer/1net.md","localizedDate":"2023年8月31日","excerpt":"<h2> 常见的网络协议</h2>\\n<h3> 应用层</h3>\\n<ul>\\n<li><strong>HTTP（Hypertext Transfer Protocol，超文本传输协议）</strong>：基于 TCP 协议，是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当使用浏览器浏览网页的时候，网页就是通过 HTTP 请求进行加载的。</li>\\n<li><strong>SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）</strong>：基于 TCP 协议，是一种用于发送电子邮件的协议。注意 ⚠️：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。</li>\\n<li><strong>POP3/IMAP（邮件接收协议）</strong>：基于 TCP 协议，两者都是负责邮件接收的协议。IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</li>\\n<li><strong>FTP（File Transfer Protocol，文件传输协议）</strong> : 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。建议在传输敏感数据时使用更安全的协议，如 SFTP。</li>\\n<li><strong>Telnet（远程登陆协议）</strong>：基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</li>\\n<li><strong>SSH（Secure Shell Protocol，安全的网络传输协议）</strong>：基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务</li>\\n<li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</li>\\n<li><strong>DNS（Domain Name System，域名管理系统）</strong>: 基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</li>\\n</ul>\\n<h3> 传输层</h3>\\n<ul>\\n<li><strong>TCP（Transmission Control Protocol，传输控制协议 ）</strong>：提供<strong>面向连接</strong>的，<strong>可靠</strong>的数据传输服务。</li>\\n<li><strong>UDP（User Datagram Protocol，用户数据协议）</strong>：提供<strong>无连接</strong>的，<strong>尽最大努力</strong>的数据传输服务（不保证数据传输的可靠性），简单高效。</li>\\n</ul>\\n<h3> 网络层</h3>\\n<ul>\\n<li><strong>IP（Internet Protocol，网际协议）</strong>：TCP/IP 协议中最重要的协议之一，属于网络层的协议，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。目前 IP 协议主要分为两种，一种是过去的 IPv4，另一种是较新的 IPv6，目前这两种协议都在使用，但后者已经被提议来取代前者。</li>\\n<li><strong>ARP（Address Resolution Protocol，地址解析协议）</strong>：ARP 协议解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</li>\\n<li><strong>ICMP（Internet Control Message Protocol，互联网控制报文协议）</strong>：一种用于传输网络状态和错误消息的协议，常用于网络诊断和故障排除。例如，Ping 工具就使用了 ICMP 协议来测试网络连通性。</li>\\n<li><strong>NAT（Network Address Translation，网络地址转换协议）</strong>：NAT 协议的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</li>\\n<li><strong>OSPF（Open Shortest Path First，开放式最短路径优先）</strong> ）：一种内部网关协议（Interior Gateway Protocol，IGP），也是广泛使用的一种动态路由协议，基于链路状态算法，考虑了链路的带宽、延迟等因素来选择最佳路径。</li>\\n<li><strong>RIP（Routing Information Protocol，路由信息协议）</strong>：一种内部网关协议（Interior Gateway Protocol，IGP），也是一种动态路由协议，基于距离向量算法，使用固定的跳数作为度量标准，选择跳数最少的路径作为最佳路径。</li>\\n<li><strong>BGP（Border Gateway Protocol，边界网关协议）</strong>：一种用来在路由选择域之间交换网络层可达性信息（Network Layer Reachability Information，NLRI）的路由选择协议，具有高度的灵活性和可扩展性。</li>\\n</ul>\\n<h2> GET 和 POST 的区别</h2>\\n<p><code>GET</code> 和 <code>POST</code> 只是 HTTP 协议中两种请求方式，而 HTTP 协议是基于 TCP/IP 的应用层协议，无论 <code>GET</code> 还是 <code>POST</code>，用的都是同一个传输层协议，所以在传输上，没有区别。</p>\\n<p>不带参数时，这俩请求的报文只有在HTTP请求行的 method 字段不一样，其他都一样。带参数时，通常约定 <code>GET</code> 方法的参数应该放在 URL 中，<code>POST</code> 方法参数应该放在 Body 中。当然也可以不遵循这种约定，只要在服务端做好支持就好了。</p>\\n<ul>\\n<li><code>GET</code> 用于获取信息，是无副作用的，是幂等的，且可缓存。</li>\\n<li><code>POST</code> 用于修改服务器上的数据，有副作用，非幂等，不可缓存。</li>\\n</ul>\\n<p><strong>GET 方法参数写法是固定的吗？</strong></p>\\n<p>在约定中，参数是写在 <code>?</code> 后面，用 <code>&amp;</code> 分割。解析报文的过程是通过获取 TCP 数据，用正则等工具从数据中获取 Header 和 Body，从而提取参数。所以 <code>GET</code> 方法的参数是可以自定义的。</p>\\n<p><strong>POST 方法比 GET 方法安全？</strong></p>\\n<p>按照网上大部分文章的解释，<code>POST</code> 比 <code>GET</code> 安全，因为数据在地址栏上不可见。然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文。要想安全传输，就只有加密，也就是 HTTPS。</p>\\n<p><strong>GET 方法的长度限制是怎么回事？</strong></p>\\n<p><strong>HTTP 协议没有 Body 和 URL 的长度限制</strong>，对 URL 限制的大多是浏览器和服务器的原因。浏览器原因就不说了，服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。</p>\\n<h2> PUT 和 POST 的区别</h2>\\n<p><strong>PUT 请求</strong></p>\\n<p><code>PUT</code> 请求是 HTTP 协议中的一种请求方法，通常用于更新或者是替换服务器上的资源。使用 <code>PUT</code> 请求时，客户端需要将整个资源的新版本发送到服务器，如果服务器有这个资源，则用客户端提交的新版本替换原有的资源，如果资源不存在则会创建一个新的资源。</p>\\n<ul>\\n<li>可以更新整个资源。</li>\\n<li>客户端需要发送完整的资源内容。</li>\\n<li>如果服务器上不存在该资源，则会创建一个新的资源。</li>\\n<li><strong><code>PUT</code> 请求具有幂等性</strong>，即执行多次 <code>PUT</code> 请求的结果应该相同。</li>\\n</ul>\\n<p><strong>POST 请求</strong></p>\\n<p><code>POST</code> 请求是 HTTP 协议中的一种请求方法，通常用于创建新的资源或提交数据到服务器进行处理。使用 <code>POST</code> 请求时，客户端将数据提交到服务器，服务器根据数据进行处理，并返回响应。通常情况下，<code>POST</code> 请求会在服务器上创建新的资源，并返回该资源的 URI。</p>\\n<ul>\\n<li>可以创建新的资源或提交数据到服务器进行处理。</li>\\n<li>客户端可以只发送部分资源内容。</li>\\n<li>如果请求成功，服务器会返回一个表示新资源的 URI。</li>\\n<li><strong><code>POST</code> 请求不具有幂等性</strong>。</li>\\n</ul>\\n<h2> HTTP</h2>\\n<h3> 从输入 URL 到页面展示到底发生了什么？</h3>\\n<ol>\\n<li>DNS 解析；</li>\\n<li>TCP 连接；</li>\\n<li>发送 HTTP 请求；</li>\\n<li>服务器处理请求并返回 HTTP 报文；</li>\\n<li>浏览器解析渲染页面；</li>\\n<li>连接结束。</li>\\n</ol>\\n<h3> HTTP 状态码</h3>\\n<ul>\\n<li>\\n<p><strong>1 开头的表示临时响应</strong>。比如 100 表示客户端可以继续发送剩余请求。</p>\\n</li>\\n<li>\\n<p><strong>2 开头的表示客户端的请求成功被接收、理解、接受了</strong>。200 OK 表示请求成功，会根据请求中使用的方法返回响应的实体。204 Not Content 表示响应成功，但是响应头没有 Body 数据。206 Partial Content 应用于 HTTP 分块下载或断点续传，表示返回的 Body 数据不是全部数据，而是当中的一部分。</p>\\n</li>\\n<li>\\n<p><strong>3 开头的表示重定向</strong>。就是说用户代理需要采取进一步措施才能满足要求。首部 Location 字段标示重定向的 URL。301 Moved Permanently 表示永久性的重定向，302 Found 表示临时性的重定向，304 Not Modified 表示客户端发送附带条件的请求时，服务端允许请求访问资源，但未满足条件（if-Match，if-Range）\\n。当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 <code>POST</code> 改成 <code>GET</code>，并删除请求报文内的主体，之后请求会自动再次发送。</p>\\n</li>\\n<li>\\n<p><strong>4 开头的表示客户端错误</strong>。400 Bad Request 代表客户端的请求服务器理解不了，属于笼统的客户端错误。401 Unauthorized 未授权。403 Forbidden 服务器拒绝执行该请求，授权了也没用。404 Not Found 请求路径不存在。</p>\\n</li>\\n<li>\\n<p><strong>5 开头的表示服务端错误</strong>。500 Internal Server Error 服务端内部出现错误，属于笼统的服务器错误。502 Bad Gateway 指的是服务器作为网关从上游服务器中获得响应时失败（上游服务器宕机或者网关配置错误），504 Gateway Timeout 指的是服务器作为网关从上游服务器中获得响应时超时（上游服务器过载）。</p>\\n</li>\\n</ul>\\n<h3> HTTPS 与 HTTP 的区别</h3>\\n<p><strong>端口号</strong>：HTTP 默认是 <code>80</code>，HTTPS 默认是 <code>443</code>。</p>\\n<p><strong>URL 前缀</strong>：HTTP 的 URL 前缀是 <code>http://</code>，HTTPS 的 URL 前缀是 <code>https://</code>。</p>\\n<p><strong>安全性和资源消耗</strong>：HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP\\n之上。<strong>所有传输的内容都经过对称加密，加密使用的秘钥是通过非对称加密传输的</strong>。HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</p>\\n<blockquote>\\n<p>服务器生成一对公钥和私钥，公钥公开出去，私钥自己保留。\\n验证证书是否被篡改：从操作系统中拿到该证书发布机构的公钥, 对证书签名解密, 得到一个 hash 值（称为数据摘要/签名）, 设为 hash1； 然后浏览器计算整个证书的 hash 值, 设为 hash2，对比 hash1 和 hash2 是否相等，如果相等, 则说明证书是没有被篡改过的。\\n客户端拿到证书的公钥之后，使用公钥对对称密钥进行加密，将加密之后的秘钥密文通过网络传输给服务器。\\n服务器拿到密文之后，通过私钥对密文进行解密，得到对称密钥，那么后续就能通过这个对称密钥对数据进行加密解密。\\n为了防止服务器是伪造的，也就是提供的公钥是伪造的，引入了证书（证书 = 公钥 + 身份标识），这样在客户端收到公钥之后就会去验证公钥的合法性，合法才会进行后续步骤。</p>\\n</blockquote>\\n<p><strong>SEO（搜索引擎优化）</strong>：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。</p>\\n<h3> HTTP 1.0、HTTP 1.1 和 HTTP 2.0</h3>\\n<ul>\\n<li>HTTP 1.0 是一种无状态，无连接的应用层协议，只能保持短连接，每次请求都需要建立 TCP 链接，完成请求之后断开，存在无法复用连接和队头阻塞问题（HTTP 1.0 规定下一个请求必须在前一个请求到达之后才能发送），不支持文件断点续传。</li>\\n<li>HTTP 1.1 增加 <code>Connection</code> 字段，通过设置 <code>Keep-Alive</code> 保持 HTTP 的连接不断开，避免了客户端与服务器之间频繁创建连接和释放连接，提高了网络利用率，使用管道化技术使得请求能够并行传送，但是响应结果必须按照请求先后顺序响应，还是无法解决队头阻塞问题。通过 <code>Range:bytes</code> 字段来支持断点续传，此外通过 <code>Cache-Control</code> 字段进行缓存处理。</li>\\n<li>HTTP 2.0 将传输的信息分为更小的消息和帧，采用二进制的格式进行编码，实现方便而且健壮。所有的请求都是通过一个 TCP 连接并发完成，多路复用真正做到了并发请求，此外还支持流量控制，首部压缩，HTTP 2.0 在客户端和服务器端使用 “首部表” 来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送，如果首部发生变化了，那么只需要发送变化了数据在 Headers 帧里面，新增或修改的首部帧会被追加到 “首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在，由客户端和服务器共同渐进地更新。</li>\\n</ul>\\n<h3> SSL/TLS 协议</h3>\\n<ul>\\n<li><strong>SSL</strong>：（Secure Socket Layer，安全套接字层），位于可靠的面向连接的网络层协议和应用层协议之间的一种协议。SSL 通过相互认证、使用数字签名保证完整性、使用加密保证私密性，以实现客户端和服务器之间的安全通信。SSL 协议可分为两层：SSL 记录协议（SSL Record\\nProtocol）：它建立在可靠的传输协议（如 TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol）：它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</li>\\n<li><strong>TLS</strong>：（Transport Layer Security，传输层安全协议），用于两个应用程序之间提供保密性和数据完整性，该协议由两成组成：TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）。较低的层为 TLS 记录协议，位于某个可靠的传输协议（例如 TCP）上面。TLS\\n是独立于应用协议。高层协议可以透明地分布在 TLS 协议上面。TLS 标准并没有规定应用程序如何在 TLS 上增加安全性； TLS握手协议以及如何解释交换的认证证书的决定权留给协议的设计者和实施者。</li>\\n</ul>\\n<h3> RPC 框架的工作原理</h3>\\n<p>RPC 框架要向服务调用方和服务提供方屏蔽各类复杂性操作，比如负载均衡、序列化和反序列化、网络重试、超时等，主要由客户端、服务器端和注册中心 3 种角色构成。</p>\\n<ul>\\n<li><strong>客户端</strong>（Client）：调用远程服务的服务消费方。客户端调用远程服务就像调用本地函数一样，客户端负责序列化、反序列化、连接池管理、负载均衡、故障转移、超时管理、异步管理等。</li>\\n<li><strong>服务器端</strong>（Server）：暴露服务的服务提供方。服务器端如同实现一个本地函数一样来实现远程服务提供，服务器端需要做收发包队列、I/O线程、工作线程、序列化及反序列化等工作。</li>\\n<li><strong>注册中心</strong>：服务注册与发现的注册中心。</li>\\n</ul>\\n<h3> 一次 RPC 的调用流程</h3>\\n<p>一次 RPC 调用包含五个部分，分别是客户端，客户端存根，服务端存根，服务提供端和网络传输。</p>\\n<ul>\\n<li><strong>客户端</strong>：服务调用方；</li>\\n<li><strong>客户端存根</strong>：用于存放服务器端的地址信息，将客户端的请求参数等信息打包成网络消息，再通过网络传输发送给服务器端；</li>\\n<li><strong>服务端存根</strong>：接收客户端发送过来的请求消息并解包，然后调用本地服务处理；</li>\\n<li><strong>服务提供端</strong>：服务的真正提供者；</li>\\n<li><strong>网络传输</strong>：底层数据传输，可以是 TCP 或 HTTP。</li>\\n</ul>\\n<h3> 有了 HTTP 为什么还需要 RPC</h3>\\n<ul>\\n<li>纯裸 TCP 是能收发数据，但它是个无边界的数据流，上层需要定义消息格式用于定义消息边界。于是就有了各种协议，HTTP 和各类 RPC 协议就是在 TCP 之上定义的应用层协议。</li>\\n<li>RPC 本质上不算是协议。目的是希望能像调用本地方法那样去调用远端的服务方法。同时 RPC 有很多种实现方式，不一定非得基于 TCP 协议。</li>\\n<li>从发展历史来说，HTTP 主要用于 B/S 架构，而 RPC 更多用于 C/S 架构。但现在其实已经没分那么清了，B/S 和 C/S 在慢慢融合。很多软件同时支持多端，所以对外一般用 HTTP 协议，而内部集群的微服务之间则采用 RPC 协议进行通讯。</li>\\n</ul>\\n<h3> 有了 HTTP 为什么还要有 WebSocket？</h3>\\n<p>WebSocket 和 HTTP 一样都是基于 TCP 的协议。经历了三次 TCP 握手之后，利用 HTTP 协议升级为 WebSocket 协议。TCP 协议本身是全双工的，最常用的 HTTP/1.1 是基于 TCP 的协议，但它是半双工的，对于大部分需要服务器主动推送数据到客户端的场景，都不太友好，因此需要使用支持全双工的 WebSocket 协议。WebSocket 会先利用HTTP协议加上一些特殊的 header 头进行握手升级操作，升级成功后就跟 HTTP 没有任何关系了，之后就用 WebSocket 的数据格式进行收发数据。</p>\\n<h3> URI 和 URL 的区别</h3>\\n<ul>\\n<li>\\n<p><strong>URI（Uniform Resource Identifier）是统一资源标志符</strong>，可以唯一标识一个资源。</p>\\n</li>\\n<li>\\n<p><strong>URL（Uniform Resource Locator）是统一资源定位符</strong>，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</p>\\n</li>\\n</ul>\\n<h2> DNS</h2>\\n<h3> DNS 的作用是什么？</h3>\\n<p>DNS（Domain Name System）域名管理系统，是当用户使用浏览器访问网址之后，使用的第一个重要协议。DNS 要解决的是<strong>域名和 IP 地址的映射问题</strong>。</p>\\n<p>如果访问的网址在 <code>hosts</code> 文件中有对应的映射表目，则直接进行解析，否则需要使用 DNS 系统，DNS 是应用层协议，基于 UDP 协议之上，端口为 <code>53</code>。</p>\\n<h3> DNS 服务器有哪些？</h3>\\n<ul>\\n<li>根 DNS 服务器。根 DNS 服务器提供 TLD 服务器的 IP 地址。目前世界上只有 13 组根服务器，我国境内目前仍没有根服务器。</li>\\n<li>顶级域 DNS 服务器（TLD 服务器）。顶级域是指域名的后缀，如 <code>com</code>、<code>org</code>、<code>net</code> 和 <code>edu</code> 等。国家也有自己的顶级域，如 <code>uk</code>、<code>fr</code> 和 <code>ca</code>。TLD 服务器提供了权威 DNS 服务器的 IP 地址。</li>\\n<li>权限 DNS 服务器。在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。</li>\\n<li>本地 DNS 服务器。每个 ISP（互联网服务提供商）都有一个自己的本地 DNS 服务器。当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，它起着代理的作用，并将该请求转发到 DNS 层次结构中。严格说来，不属于 DNS 层级结构。</li>\\n</ul>\\n<p>解析方式分为迭代查询和递归查询。</p>\\n<p><img src=\\"/markdown/3192518.jpg\\" alt=\\"3192518\\"></p>\\n<h2> TCP 与 UDP</h2>\\n<h3> TCP 与 UDP 的区别</h3>\\n<ul>\\n<li><strong>是否面向连接</strong>：UDP 在传送数据之前不需要先建立连接。而 TCP 提供面向连接的服务，在传送数据之前必须先建立连接，数据传送结束后要释放连接。</li>\\n<li><strong>是否是可靠传输</strong>：远地主机在收到 UDP 报文后，不需要给出任何确认，并且不保证数据不丢失，不保证是否顺序到达。TCP 提供可靠的传输服务，TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制。通过 TCP 连接传输的数据，无差错、不丢失、不重复、并且按序到达。</li>\\n<li><strong>是否有状态</strong>：这个和上面的“是否可靠传输”相对应。TCP 传输是有状态的，这个有状态说的是 TCP 会去记录自己发送消息的状态比如消息是否发送了、是否被接收了等等。为此 ，TCP 需要维持复杂的连接状态表。而 UDP 是无状态服务，简单来说就是不管发出去之后的事情了。</li>\\n<li><strong>传输效率</strong>：由于使用 TCP 进行传输的时候多了连接、确认、重传等机制，所以 TCP 的传输效率要比 UDP 低很多。</li>\\n<li><strong>传输形式</strong>：TCP 是面向字节流的，UDP 是面向报文的。</li>\\n<li><strong>首部开销</strong>：TCP 首部开销（20 ～ 60 字节）比 UDP 首部开销（8 字节）要大。</li>\\n<li><strong>是否提供广播或多播服务</strong>：TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多；</li>\\n</ul>\\n<h3> 什么时候选择 TCP，什么时候选 UDP？</h3>\\n<ul>\\n<li><strong>UDP 一般用于即时通信</strong>，语音、 视频、直播等等。这些场景对传输数据的准确性要求不是特别高，比如看视频即使少个一两帧，实际给人的感觉区别也不大。</li>\\n<li><strong>TCP 用于对传输准确性要求特别高的场景</strong>，文件传输、发送和接收邮件、远程登录等等。</li>\\n</ul>\\n<h3> HTTP 基于 TCP 还是 UDP？</h3>\\n<p>HTTP 3.0 之前是基于 TCP 协议的，而 HTTP 3.0 将弃用 TCP，改用<strong>基于 UDP 的 QUIC 协议</strong>。此变化解决了 HTTP 2.0 中存在的队头阻塞问题。由于 HTTP 2.0 在单个 TCP 连接上使用了多路复用，受到 TCP 拥塞控制的影响，少量的丢包就可能导致整个 TCP 连接上的所有流被阻塞。另外，HTTP 2.0 需要经过经典的 TCP\\n三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP 3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。</p>\\n<h3> 使用 TCP 的协议有哪些？使用 UDP 的协议有哪些？</h3>\\n<p><strong>运行于 TCP 协议之上的协议</strong>：</p>\\n<ul>\\n<li><strong>HTTP 协议</strong>：超文本传输协议（HTTP，HyperText Transfer Protocol)是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当使用浏览器浏览网页的时候，网页就是通过 HTTP 请求进行加载的。</li>\\n<li><strong>HTTPS 协议</strong>：更安全的超文本传输协议(HTTPS，Hypertext Transfer Protocol Secure)，身披 SSL 外衣的 HTTP 协议</li>\\n<li><strong>FTP 协议</strong>：文件传输协议 FTP（File Transfer Protocol）是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。建议在传输敏感数据时使用更安全的协议，如 SFTP。</li>\\n<li><strong>SMTP 协议</strong>：简单邮件传输协议（SMTP，Simple Mail Transfer Protocol）的缩写，是一种用于发送电子邮件的协议。注意 ⚠️：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。</li>\\n<li><strong>POP3/IMAP 协议</strong>：两者都是负责邮件接收的协议。IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</li>\\n<li><strong>Telnet 协议</strong>：用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</li>\\n<li><strong>SSH 协议</strong>：SSH（Secure Shell）是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH 建立在可靠的传输协议 TCP 之上。</li>\\n</ul>\\n<p><strong>运行于 UDP 协议之上的协议</strong>：</p>\\n<ul>\\n<li><strong>DHCP</strong>：动态主机配置协议，动态配置 IP 地址。</li>\\n<li><strong>DNS</strong>：域名系统（DNS，Domain Name System）。</li>\\n</ul>\\n<h2> TCP 三次握手和四次挥手（传输层）</h2>\\n<h3> 建立连接 - TCP三次握手</h3>\\n<ul>\\n<li><strong>一次握手</strong>：客户端发送带有 <code>SYN(SEQ=x)</code> 标志的数据包 -&gt; 服务端，然后客户端进入 <code>SYN_SEND</code> 状态，等待服务器的确认；</li>\\n<li><strong>二次握手</strong>：服务端发送带有 <code>SYN+ACK(SEQ=y,ACK=x+1)</code> 标志的数据包 –&gt; 客户端，然后服务端进入 <code>SYN_RECV</code> 状态；</li>\\n<li><strong>三次握手</strong>：客户端发送带有 <code>ACK(ACK=y+1)</code> 标志的数据包 –&gt; 服务端，然后客户端和服务器端都进入 <code>ESTABLISHED</code> 状态，完成 TCP 三次握手。</li>\\n</ul>\\n<p><img src=\\"/markdown/image-202307272029.png\\" alt=\\"tcp三次握手\\"></p>\\n<h3> 为什么要三次握手？</h3>\\n<p>三次握手的目的是建立可靠的通信信道。</p>\\n<ol>\\n<li>第一次握手：Client 什么都不能确认，Server 确认了对方发送正常，自己接收正常。</li>\\n<li>第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常。</li>\\n<li>第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常。</li>\\n</ol>\\n<p>三次握手就能确认双方收发功能都正常，缺一不可。</p>\\n<h3> 断开连接 - TCP 四次挥手</h3>\\n<p><img src=\\"/markdown/image-tcpfour.png\\" alt=\\"TCP四次挥手\\"></p>\\n<ol>\\n<li><strong>第一次挥手</strong>：客户端发送一个 <code>FIN(SEQ=x)</code> 标志的数据包 -&gt; 服务端，用来关闭客户端到服务器的数据传送。然后，客户端进入 <code>FIN-WAIT-1</code> 状态。</li>\\n<li><strong>第二次挥手</strong>：服务器收到这个 <code>FIN(SEQ=X)</code> 标志的数据包，它发送一个 <code>ACK(ACK=x+1)</code> 标志的数据包-&gt;客户端 。然后，此时服务端进入 <code>CLOSE-WAIT</code> 状态，客户端进入 <code>FIN-WAIT-2</code> 状态。</li>\\n<li><strong>第三次挥手</strong>：服务端关闭与客户端的连接并发送一个 <code>FIN(SEQ=y)</code> 标志的数据包 -&gt; 客户端请求关闭连接，然后，服务端进入 <code>LAST-ACK</code> 状态。</li>\\n<li><strong>第四次挥手</strong>：客户端发送 <code>ACK(ACK=y+1)</code> 标志的数据包 -&gt; 服务端，并且客户端进入 <code>TIME-WAIT</code> 状态，服务端在收到 <code>ACK(ACK=y+1)</code> 标志的数据包后进入 <code>CLOSE</code> 状态。此时，如果客户端等待 <strong>2MSL</strong> 后依然没有收到回复，就证明服务端已正常关闭，随后，客户端也可以关闭连接了。</li>\\n</ol>\\n<p><strong>只要四次挥手没有结束，客户端和服务端就可以继续传输数据</strong></p>\\n<h3> 为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？</h3>\\n<p>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 <code>ACK</code>，表示接收到了断开连接的请求。等到数据发完之后再发 <code>FIN</code>，断开服务器到客户端的数据传送。</p>\\n<h3> 为什么第四次挥手客户端需要等待 2*MSL（报文段最长寿命）时间后才进入 CLOSED 状态？</h3>\\n<p>第四次挥手时，客户端发送给服务器的 <code>ACK</code> 有可能丢失，如果服务端因为某些原因而没有收到 <code>ACK</code> 的话，服务端就会重发 <code>FIN</code>，如果客户端在 2*MSL 的时间内收到了 <code>FIN</code>，就会重新发送 <code>ACK</code> 并再次等待 2MSL，防止 Server 没有收到 <code>ACK</code> 而不断重发 <code>FIN</code>。从客户端回复 <code>ACK</code> 到关闭的过程需要等待\\n2MSL，防止这个 <code>ACK</code> 对方没有收到，如果这个时间段内都没有收到任何回复消息，则说明服务端已经关闭，自己也能关闭。</p>\\n<h2> TCP 传输可靠性保障（传输层）</h2>\\n<h3> TCP 如何保证传输的可靠性？</h3>\\n<ul>\\n<li><strong>基于数据块传输</strong>：应用数据被分割成 TCP 认为最适合发送的数据块，再传输给网络层，数据块被称为报文段或段。</li>\\n<li><strong>对失序数据包重新排序以及去重</strong>：TCP 为了保证不发生丢包，就给每个包一个序列号，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据就可以实现数据包去重。</li>\\n<li><strong>校验和</strong> : TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>\\n<li><strong>超时重传</strong> : 当发送方发送数据之后，它启动一个定时器，等待目的端确认收到这个报文段。接收端实体对已成功收到的包发回一个相应的确认信息（ACK）。如果发送端实体在合理的往返时延（RTT）内未收到确认消息，那么对应的数据包就被重传。</li>\\n<li><strong>流量控制</strong> : TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议（TCP 利用滑动窗口实现流量控制）。</li>\\n<li><strong>拥塞控制</strong> : 当网络拥塞时，减少数据的发送。</li>\\n</ul>\\n<h3> TCP 如何实现流量控制？</h3>\\n<p><strong>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。</strong></p>\\n<h3> TCP 的拥塞控制是怎么实现的？</h3>\\n<p>通过拥塞控制算法实现。其中发送窗口 = Min(拥塞窗口，接收窗口)。</p>\\n<ul>\\n<li><strong>慢开始</strong>： 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd（拥塞窗口）初始值为 1，每收到一个确认，cwnd+1，每一个轮次后 cwnd 加倍。</li>\\n<li><strong>拥塞避免</strong>： 拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，即每经过一个往返时间 RTT 就把发送方的 cwnd 加 1.</li>\\n<li><strong>快重传与快恢复</strong>： 快重传：如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。快恢复：在网络发生拥塞之后，不会将拥塞窗口设置为 1，而是直接设置为 <code>ssthresh</code> 阈值的一半。</li>\\n</ul>\\n<h2> ARQ 协议</h2>\\n<p>ARQ称为<strong>自动重传请求</strong>（Automatic Repeat-reQuest，ARQ）；</p>\\n<h3> 停止等待协议</h3>\\n<p><strong>发送窗口 = 接收窗口 = 1</strong></p>\\n<p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。</p>\\n<h3> 后退N帧协议（GBN）</h3>\\n<p><strong>发送窗口 &gt; 1 ,接收窗口 = 1</strong></p>\\n<p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p>\\n<p>发送方能将发送窗口内的所有序号发送，接收窗口每收到一个序号就会发送一个确认帧，并将接收窗口向前移动。如果发送方超时没有收到确认帧，则将此确认帧还有之后已经发送的序号全部重发。</p>\\n<p>如果收到了序号n的确认，则认为前面需要的数据在接收端都受到了，这种确认叫做<strong>累计确认机制</strong>。</p>\\n<h3> 选择重传协议（SR）</h3>\\n<p><strong>发送窗口 &gt; 1 ,接收窗口 &gt; 1</strong></p>\\n<p>选择重传协议不再具有累计确认机制，凡是接收窗口中的序号都接收并返回确认帧，如果发生超时，就重传超时的帧，而不是 GBN 中的当前帧和后续的所有帧。</p>\\n<h2> IP（网络层）</h2>\\n<h3> IP 协议的作用是什么？</h3>\\n<p>IP（网际协议）是TCP/IP协议中最重要的协议之一，属于网络层的协议，主作用是定义数据包的格式，对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。</p>\\n"}');export{n as data};

import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,e as o,f as n}from"./app-54c4d723.js";const t="/markdown/image-20230620221443613.png",p="/markdown/image-20230620223832571.png",c={},i=n('<h2 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc" aria-hidden="true">#</a> SpringMVC</h2><h3 id="springmvc处理请求的底层原理" tabindex="-1"><a class="header-anchor" href="#springmvc处理请求的底层原理" aria-hidden="true">#</a> SpringMVC处理请求的底层原理</h3><p>请求会被<code>DispatcherServlet</code>拦截，<code>DispatcherServlet</code>结构如图。</p><p><img src="'+t+'" alt="image-20230620221443613"></p>',4),l=n('<p><strong>SpringMVC中的一次请求流程：</strong></p><ol><li>客户端（浏览器）发送请求， <code>DispatcherServlet</code>拦截请求。</li><li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code> 。<code>HandlerMapping</code> 根据 uri 去匹配查找能处理的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器） ，并会将请求涉及到的拦截器和 <code>Handler</code> 一起封装。</li><li><code>DispatcherServlet</code> 调用 <code>HandlerAdapter</code>适配器执行 <code>Handler</code> 。</li><li><code>Handler</code> 完成对用户请求的处理后，会返回一个 <code>ModelAndView</code> 对象给<code>DispatcherServlet</code>，<code>ModelAndView</code>包含了数据模型以及相应的视图的信息。<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li><li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li><li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code>（视图渲染）。</li><li>把 <code>View</code> 返回给请求者（浏览器）。</li></ol><p><img src="'+p+`" alt="image-20230620223832571"></p><h3 id="springmvc的核心组件有哪些" tabindex="-1"><a class="header-anchor" href="#springmvc的核心组件有哪些" aria-hidden="true">#</a> SpringMVC的核心组件有哪些？</h3><ul><li><code>DispatcherServlet</code>：<strong>核心的中央处理器</strong>，负责接收请求、分发、并给予客户端响应。</li><li><code>HandlerMapping</code>：<strong>处理器映射器</strong>，根据uri去匹配查找能处理的<code>Handler</code>，并会将请求涉及到的拦截器和<code>Handler</code>一起封装，<code>Handler</code>其实就是<code>Controller</code>。</li><li><code>HandlerAdapter</code>：<strong>处理器适配器</strong>，根据<code>HandlerMapping</code>找到的<code>Handler</code>，适配执行对应的<code>Handler</code>。</li><li><code>Handler</code>：<strong>请求处理器</strong>，处理实际请求的处理器。</li><li><code>ViewResolver</code>：<strong>视图解析器</strong>，根据<code>Handler</code>返回的逻辑视图/视图，解析并渲染真正的视图，并传递给<code>DispatcherServlet</code>响应给客户端。</li></ul><h3 id="springmvc零配置" tabindex="-1"><a class="header-anchor" href="#springmvc零配置" aria-hidden="true">#</a> SpringMVC零配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebApplicationInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DispatcherServlet</span> servlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/app/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接使用类也能完成配置文件中类似的配置；</p><p>创建容器，创建<code>DispatcherServlet</code>，并将容器放入，创建<code>Servlet</code>，并添加<code>Servlet</code>匹配路径。</p><h3 id="统一异常处理" tabindex="-1"><a class="header-anchor" href="#统一异常处理" aria-hidden="true">#</a> 统一异常处理</h3><p>使用到 <code>@ControllerAdvice</code> + <code>@ExceptionHandler</code> 这两个注解实现统一异常处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BaseException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleAppException</span><span class="token punctuation">(</span><span class="token class-name">BaseException</span> ex<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//......</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ResourceNotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorReponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResourceNotFoundException</span><span class="token punctuation">(</span><span class="token class-name">ResourceNotFoundException</span> ex<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种异常处理方式下，会给所有或者指定的 <code>Controller</code> 织入异常处理的逻辑（AOP），当 <code>Controller</code> 中的方法抛出异常的时候，由被<code>@ExceptionHandler</code> 注解修饰的方法进行处理。</p><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot" aria-hidden="true">#</a> SpringBoot</h2><h3 id="springbootapplication注解的作用" tabindex="-1"><a class="header-anchor" href="#springbootapplication注解的作用" aria-hidden="true">#</a> SpringBootApplication注解的作用？</h3><p><code>@SpringBootApplication</code>是一个复合注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加了<code>@SpringBootApplication</code>，相当于添加了<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>三个注解。</p><ul><li><p><code>@SpringBootConfiguration</code>：相当于注解<code>@Configuration</code>表示这是一个配置类。</p></li><li><p><code>@EnableAutoConfiguration</code>：这个注解会负责进行自动配置类的导入，就是将项目中的自动配置类导入到Spring容器中，从而得到解析。</p><blockquote><p>此注解内部有<code>@Import({AutoConfigurationImportSelector.class})</code>注解，用来扫描项目中的自动配置类并将其返回为自动配置类的名字<code>String[]</code>给Spring容器进行加载。</p></blockquote></li><li><p><code>@ComponentScan</code>：Spring容器会进行扫描，默认扫描路径就是这个类所在的包路径。</p></li></ul><h3 id="springboot中的spring-factories文件有什么作用" tabindex="-1"><a class="header-anchor" href="#springboot中的spring-factories文件有什么作用" aria-hidden="true">#</a> SpringBoot中的spring.factories文件有什么作用？</h3><p>spring.factories是SpringBoot SPI实现的核心，SPI机制表示扩展机制，所以spring.factories就是对SpringBoot进行扩展的，比如要添加Listener，只需要在这个文件中添加类路径名。</p><p>SpringBoot在启动的过程中，会找出项目中所有的spring.factories文件，从而向Spring容器中去添加各种spring.factories中指定的组件、配置类等，使得对SpringBoot的扩展的变得很容易。</p><h3 id="springboot的启动流程" tabindex="-1"><a class="header-anchor" href="#springboot的启动流程" aria-hidden="true">#</a> SpringBoot的启动流程</h3><ol><li><p><strong>加载主要配置类</strong>： Spring Boot 的入口是一个主要的配置类，通常是带有 <code>@SpringBootApplication</code> 注解的类。在启动过程中，Spring Boot 首先会加载这个配置类。</p></li><li><p><strong>创建 Spring 应用上下文</strong>： Spring Boot 使用 Spring 的核心容器，即应用上下文（<code>Application Context</code>）来管理和组织组件。在启动过程中，Spring Boot 会创建一个根应用上下文，并将主要配置类加载到这个应用上下文中。</p></li><li><p><strong>执行自动配置</strong>： Spring Boot 的核心功能之一是自动配置（<code>Auto-Configuration</code>），它通过条件化配置来根据应用的依赖和配置来自动装配和配置各种功能和组件。在启动过程中，Spring Boot 会根据配置和类路径上的依赖，自动配置各种功能，如数据库连接、Web MVC、安全性等。</p></li><li><p><strong>执行启动器（Starters）</strong>： Spring Boot 提供了一系列的启动器，它们是一组预配置的依赖关系，可以快速启动特定类型的应用。启动器通过自动配置和依赖管理来简化应用的搭建和配置。在启动过程中，Spring Boot 会根据应用的类型和配置，自动加载适当的启动器。</p></li><li><p><strong>启动 Web 容器</strong>： 如果应用是一个 Web 应用，Spring Boot 会自动启动一个嵌入式的 Web 容器（如Tomcat、Jetty等），并将应用部署到该容器中。</p></li><li><p><strong>运行应用</strong>： 一切就绪后，Spring Boot 会开始运行应用。它会触发各种生命周期事件，调用初始化方法、执行业务逻辑等。</p></li></ol>`,24);function r(d,u){return s(),e("div",null,[i,o(" more "),l])}const v=a(c,[["render",r],["__file","1spring.html.vue"]]);export{v as default};

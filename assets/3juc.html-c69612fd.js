import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as d,c as u,e as i,a as r,w as s,f as o,d as a,b as n}from"./app-dace7bcc.js";const k="/markdown/image-20230616174109050.png",h={},m=o('<h2 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal" aria-hidden="true">#</a> ThreadLocal</h2><h3 id="threadlocal-有什么用" tabindex="-1"><a class="header-anchor" href="#threadlocal-有什么用" aria-hidden="true">#</a> ThreadLocal 有什么用？</h3><p><code>ThreadLocal</code> 类主要解决的就是让每个线程绑定自己的值，可以将 <code>ThreadLocal</code> 类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。</p><p>如果创建了一个 <code>ThreadLocal</code> 变量，那么访问这个变量的每一个线程都有这个变量的副本。可以使用 <code>get()</code> 和 <code>set()</code> 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。</p>',4),v=o(`<h3 id="threadlocal-原理" tabindex="-1"><a class="header-anchor" href="#threadlocal-原理" aria-hidden="true">#</a> ThreadLocal 原理</h3><p><code>Thread</code> 类源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token comment">//与此线程有关的ThreadLocal值。由ThreadLocal类维护</span>
    <span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">//与此线程有关的InheritableThreadLocal值，由InheritableThreadLocal类维护。</span>
    <span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量是放在了当前线程的 <code>ThreadLocalMap</code> 中，并不是存在 <code>ThreadLocal</code> 中，<code>ThreadLocal</code> 可以理解为 <code>ThreadLocalMap</code> 的封装。</p><p><code>ThreadLocal</code> 类的 <code>set()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取当前请求的线程</span>
    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//取出 Thread 类内部的 threadLocals 变量(哈希表结构)</span>
    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token comment">// 将需要存储的值放入到这个哈希表中</span>
        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个 <code>Thread</code> 中都具备一个 <code>ThreadLocalMap</code>，<strong>而 <code>ThreadLocalMap</code> 存储以 <code>ThreadLocal</code> 为 key，Object 对象为 value 的键值对</strong>（JDK 1.8）。</p><p><code>ThreadLocalMap</code> 是 <code>ThreadLocal</code> 的静态内部类。</p><p><img src="`+k+`" alt="17195626"></p><h3 id="threadlocal-内存泄露" tabindex="-1"><a class="header-anchor" href="#threadlocal-内存泄露" aria-hidden="true">#</a> ThreadLocal 内存泄露</h3><p><code>ThreadLocalMap</code> 中使用的 key 为 <code>ThreadLocal</code> 的<strong>弱引用</strong>，而 value 是<strong>强引用</strong>。所以，如果 <code>ThreadLocal</code> 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。</p><p>这样一来，<code>ThreadLocalMap</code> 中就会出现 key 为 null 的 Entry。假如不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。<code>ThreadLocalMap</code> 实现中已经考虑了这种情况，在调用 <code>set()</code>、<code>get()</code>、<code>remove()</code> 方法的时候，会清理掉 key 为 null 的记录，建议在每次操作 <code>ThreaLocalMap</code> 的时候都调用一次 <code>remove()</code> 方法。</p><blockquote><p>建议在请求第一次使用 <code>ThreadLocal</code> 的时候调用 <code>remove()</code> 方法，防止线程复用导致 <code>ThreadLocalMap</code> 中存储的旧数据被错误的使用。</p></blockquote><h2 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h2><h3 id="什么是线程池" tabindex="-1"><a class="header-anchor" href="#什么是线程池" aria-hidden="true">#</a> 什么是线程池？</h3><p>线程池是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务。</p><h3 id="为什么要用线程池" tabindex="-1"><a class="header-anchor" href="#为什么要用线程池" aria-hidden="true">#</a> 为什么要用线程池？</h3><p>池化技术是为了减少每次获取资源的消耗，提高资源利用率。</p><p>使用线程池的好处：</p><ul><li>降低资源消耗；</li><li>提高响应速度；</li><li>提高线程的可管理性。</li></ul><h3 id="如何创建线程池" tabindex="-1"><a class="header-anchor" href="#如何创建线程池" aria-hidden="true">#</a> 如何创建线程池？</h3><ul><li>通过 <code>ThreadPoolExecutor</code> 构造函数来创建；</li><li>通过 <code>Executor</code> 框架的工具类 <code>Executors</code> 来创建。</li></ul><p>不同类型的 <code>ThreadPoolExecutor</code>:</p><ul><li><p><strong><code>FixedThreadPool</code></strong>：该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。<strong>核心线程数为 n，最大线程数为 n</strong>。</p></li><li><p><strong><code>SingleThreadExecutor</code></strong>： 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。<strong>核心线程数为 1，最大线程数为 1。</strong></p></li><li><p><strong><code>CachedThreadPool</code></strong>： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。<strong>核心线程数为 0，最大线程数为 <code>Integer.MAX_VALUE</code></strong>。</p></li><li><p><strong><code>ScheduledThreadPool</code></strong>：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。<strong>核心线程数为 n，最大线程数为<code>Integer.MAX_VALUE</code></strong>。</p></li></ul><table><thead><tr><th>ThreadPoolExecutor</th><th style="text-align:center;">corePoolSize</th><th style="text-align:center;">maximumPoolSize</th><th style="text-align:center;">任务队列</th><th style="text-align:center;">可创建的最大线程数</th></tr></thead><tbody><tr><td><code>FixedThreadPool</code></td><td style="text-align:center;">n</td><td style="text-align:center;">n</td><td style="text-align:center;"><code>LinkedBlockingQueue</code><br>无界队列</td><td style="text-align:center;">n</td></tr><tr><td><code>SingleThreadExecutor</code></td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;"><code>LinkedBlockingQueue</code><br>无界队列</td><td style="text-align:center;">1</td></tr><tr><td><code>CachedThreadPool</code></td><td style="text-align:center;">0</td><td style="text-align:center;">Integer.MAX_VALUE</td><td style="text-align:center;"><code>SynchronousQueue</code><br>同步队列</td><td style="text-align:center;">Integer.MAX_VALUE</td></tr><tr><td><code>ScheduledThreadPool</code></td><td style="text-align:center;">n</td><td style="text-align:center;">Integer.MAX_VALUE</td><td style="text-align:center;"><code>DelayedWorkQueue</code><br>延迟阻塞队列</td><td style="text-align:center;">n</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>最大线程数</strong>是线程池参数，与<strong>可创建的最大线程数</strong>不是一个意思。</p></div><h3 id="线程池的主要参数" tabindex="-1"><a class="header-anchor" href="#线程池的主要参数" aria-hidden="true">#</a> 线程池的主要参数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> corePoolSize<span class="token punctuation">;</span><span class="token comment">//线程池的核心线程数量</span>
<span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">;</span><span class="token comment">//线程池的最大线程数</span>
<span class="token keyword">long</span> keepAliveTime<span class="token punctuation">;</span><span class="token comment">//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span>
<span class="token class-name">TimeUnit</span> unit<span class="token punctuation">;</span><span class="token comment">//时间单位</span>
<span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">;</span><span class="token comment">//任务队列</span>
<span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">;</span><span class="token comment">//线程工厂</span>
<span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">;</span><span class="token comment">//拒绝策略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>ThreadPoolExecutor</code> 3 个最重要的参数：</strong></p><ul><li><strong><code>corePoolSize</code></strong>： 任务队列未达到队列容量时，最大可以同时运行的线程数量。</li><li><strong><code>maximumPoolSize</code></strong>：任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li><strong><code>workQueue</code></strong>：新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li></ul><p><code>ThreadPoolExecutor</code> 其他常见参数 :</p><ul><li><strong><code>keepAliveTime</code></strong>：线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code> 才会被回收销毁；</li><li><strong><code>unit</code></strong>：<code>keepAliveTime</code> 参数的时间单位。</li><li><strong><code>threadFactory</code></strong>：executor 创建新线程的时候会用到。</li><li><strong><code>handler</code></strong>：饱和策略。</li></ul><h3 id="线程池的饱和策略有哪些" tabindex="-1"><a class="header-anchor" href="#线程池的饱和策略有哪些" aria-hidden="true">#</a> 线程池的饱和策略有哪些？</h3><p>如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，新来的任务将会被：</p><ul><li><p><strong><code>ThreadPoolExecutor.AbortPolicy</code></strong>：抛出 <code>RejectedExecutionException</code> 来拒绝新任务的处理。</p></li><li><p><strong><code>ThreadPoolExecutor.CallerRunsPolicy</code></strong>：调用执行自己的线程运行任务，也就是直接在调用 <code>execute</code> 方法的线程中运行（<code>run</code> 方法）被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果应用程序可以承受此延迟并且要求任何一个任务请求都要被执行的话，以选择这个策略。</p></li><li><p><strong><code>ThreadPoolExecutor.DiscardPolicy</code></strong>：不处理新任务，直接丢弃掉。</p></li><li><p><strong><code>ThreadPoolExecutor.DiscardOldestPolicy</code></strong>： 此策略将丢弃最早的未处理的任务请求。</p></li></ul><h3 id="线程池中常用的阻塞队列有哪些" tabindex="-1"><a class="header-anchor" href="#线程池中常用的阻塞队列有哪些" aria-hidden="true">#</a> 线程池中常用的阻塞队列有哪些？</h3><p>新任务到来的时候，如果核心线程已经满了，就会放入到阻塞队列中。</p><p>常见的阻塞队列：</p><ul><li><p>容量为 <code>Integer.MAX_VALUE</code> 的 <code>LinkedBlockingQueue</code>（无界队列）：<code>FixedThreadPool</code> 和 <code>SingleThreadExector</code> 。由于队列永远不会被放满，因此 <strong><code>FixedThreadPool</code> 和 <code>SingleThreadExector</code> 最多只能创建核心线程数的线程</strong>。</p></li><li><p><code>SynchronousQueue</code>（同步队列）：<code>CachedThreadPool</code> 。<code>SynchronousQueue</code> 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说 <strong><code>CachedThreadPool</code> 的最大线程数是 <code>Integer. MAX_VALUE</code></strong>，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。</p></li><li><p><code>DelayedWorkQueue</code>（延迟阻塞队列）：<code>ScheduledThreadPool</code> 和 <code>SingleThreadScheduledExecutor</code>。<code>DelayedWorkQueue</code> 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。<code>DelayedWorkQueue</code> 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 <code>Integer.MAX_VALUE</code>，可以看做是一个放不满的队列，所以 <strong><code>ScheduledThreadPool</code> 最多只能创建核心线程数的线程</strong>。</p></li></ul><p>总结：只有 <code>SynchronousQueue</code> 任务队列不放任务，因此直接创建线程，能创建的线程数就是最大线程数，其他几种队列都可以看做不会塞满，因此最多只能创建核心线程数的线程。</p><h3 id="线程池处理任务的流程了解吗" tabindex="-1"><a class="header-anchor" href="#线程池处理任务的流程了解吗" aria-hidden="true">#</a> 线程池处理任务的流程了解吗？</h3><ul><li><p>如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。</p></li><li><p>如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。</p></li><li><p>如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。</p></li><li><p>如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用 <code>RejectedExecutionHandler.rejectedExecution()</code> 方法。</p></li></ul><h3 id="如何设定线程池的大小" tabindex="-1"><a class="header-anchor" href="#如何设定线程池的大小" aria-hidden="true">#</a> 如何设定线程池的大小？</h3><p><strong>CPU 密集型任务（N + 1）</strong>：N 表示 CPU 核心数，比 N 多 1 是为了处理线程偶然发生的缺页中断，或者是其他原因导致任务暂停带来的影响。</p><p><strong>I/O 密集型任务（2N）</strong>：系统大部分时间用来 IO 交互，而在处理 IO 的时候不会占用 CPU 资源，这时可将 CPU 资源交给其他任务，因此创建 N + N 个核心线程。</p><h2 id="future" tabindex="-1"><a class="header-anchor" href="#future" aria-hidden="true">#</a> Future</h2><h3 id="future-类有什么用" tabindex="-1"><a class="header-anchor" href="#future-类有什么用" aria-hidden="true">#</a> Future 类有什么用？</h3><p><code>Future</code> 类是异步思想的典型运用，主要用在一些需要执行耗时任务的场景，避免程序一直原地等待耗时任务执行完成，执行效率太低。</p><p><strong>简单理解</strong>：有一个任务，提交给了 <code>Future</code> 来处理。任务执行期间自己可以去做任何想做的事情。并且，在这期间还可以取消任务以及获取任务的执行状态。一段时间之后，可以从 <code>Future</code> 那里直接取出任务执行结果。</p><h3 id="callable-和-future-有什么关系" tabindex="-1"><a class="header-anchor" href="#callable-和-future-有什么关系" aria-hidden="true">#</a> Callable 和 Future 有什么关系？</h3><p><code>FutureTask</code> 提供了 <code>Future</code> 接口的基本实现，常用来封装 <code>Callable</code> 和 <code>Runnable</code>，具有取消任务、查看任务是否执行完成以及获取任务执行结果的方法。<code>ExecutorService.submit()</code> 方法返回的其实就是 <code>Future</code> 的实现类 <code>FutureTask</code>。</p><p><code>FutureTask</code> 有两个构造函数，可传入 <code>Callable</code> 或者 <code>Runnable</code> 对象。实际上，传入 <code>Runnable</code> 对象也会在方法内部转换为 <code>Callable</code> 对象。</p>`,52),g=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"FutureTask"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),a(" callableTask "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"FutureTask"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"Callable"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token class-name"},"Object"),a(),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token keyword"},"throws"),a(),n("span",{class:"token class-name"},"Exception"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),a("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Callable对象"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token string"},'"result"'),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"FutureTask"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),a(" task "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"FutureTask"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"Runnable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"void"),a(),n("span",{class:"token function"},"run"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),a("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Runnable对象"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},'"result"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=o(`<p><code>FutureTask</code> 相当于对 <code>Callable</code> 进行了封装，管理着任务执行的情况，存储了 <code>Callable</code> 的 <code>call</code> 方法的任务执行结果。</p><h3 id="completablefuture-类有什么用" tabindex="-1"><a class="header-anchor" href="#completablefuture-类有什么用" aria-hidden="true">#</a> CompletableFuture 类有什么用？</h3><p><code>Future</code> 在实际使用过程中存在一些局限性比如不支持异步任务的编排组合、获取计算结果的 <code>get()</code> 方法为阻塞调用。</p><p>Java 8 才被引入 <code>CompletableFuture</code> 类可以解决 <code>Future</code> 的这些缺陷。<code>CompletableFuture</code> 除了提供了更为好用和强大的 <code>Future</code> 特性之外，还提供了函数式编程、<strong>异步任务编排组合</strong>（可以将多个异步任务串联起来，组成一个完整的链式调用）等能力。该类创建任务时需要添加一个任务，和用来执行任务的线程池。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuInfoEntity</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sku基本信息的获取  pms_sku_info</span>
    <span class="token class-name">SkuInfoEntity</span> info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuItemVo<span class="token punctuation">.</span><span class="token function">setInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> info<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuInfoEntity</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//业务代码2，需要future1完成之后才能执行</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuInfoEntity</span><span class="token punctuation">&gt;</span></span> future3 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//业务代码</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuInfoEntity</span><span class="token punctuation">&gt;</span></span> future4 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//业务代码</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//多个任务等待异步完成</span>
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span>future2<span class="token punctuation">,</span>future3<span class="token punctuation">,</span>future4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function x(y,f){const c=p("Tabs");return d(),u("div",null,[m,i(" more "),v,r(c,{id:"382",data:[{id:"传入Callable"},{id:"传入Runnable"}],active:0},{title0:s(({value:e,isActive:t})=>[a("传入Callable")]),title1:s(({value:e,isActive:t})=>[a("传入Runnable")]),tab0:s(({value:e,isActive:t})=>[g]),tab1:s(({value:e,isActive:t})=>[b]),_:1}),T])}const _=l(h,[["render",x],["__file","3juc.html.vue"]]);export{_ as default};

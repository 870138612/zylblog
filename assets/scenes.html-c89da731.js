const e=JSON.parse('{"key":"v-601bbc9a","path":"/discovery/scenes.html","title":"场景题","lang":"zh-CN","frontmatter":{"title":"场景题","icon":"changjing","category":["场景题"],"tag":["场景题"]},"headers":[{"level":3,"title":"CPU 飙高系统反应慢怎么排查？","slug":"cpu-飙高系统反应慢怎么排查","link":"#cpu-飙高系统反应慢怎么排查","children":[]},{"level":3,"title":"在 2G 大小的文件中，找出高频 top100 的单词","slug":"在-2g-大小的文件中-找出高频-top100-的单词","link":"#在-2g-大小的文件中-找出高频-top100-的单词","children":[]}],"git":{"createdTime":1694156763000,"updatedTime":1694162951000,"contributors":[{"name":"ZYL1210","email":"870138612@qq.com","commits":2}]},"readingTime":{"minutes":1.49,"words":447},"filePathRelative":"discovery/scenes.md","localizedDate":"2023年9月8日","excerpt":"<h3> CPU 飙高系统反应慢怎么排查？</h3>\\n<ul>\\n<li>CPU 是整个电脑的核心计算资源，对于一个应用进程来说，CPU 的最小执行单元是线程。</li>\\n<li>导致 CPU 占用率较高的原因是因为频繁的上下文切换或者 CPU 资源过度消耗，导致应用中的线程无法获得 CPU 的调度，从而影响效率。</li>\\n<li>可以通过 top 命令找到利用率较高的线程。\\n<ul>\\n<li>如果是利用过高的线程一直是同一个，则说明长时间 CPU 没有释放，通过 jstack 获得线程的 dump 日志，定位到日志就可以找到问题代码。</li>\\n<li>CPU 利用率过高的线程 id 不断变化，说明线程创建过多，需要挑选几个线程 id，通过 jstack 去线程 dump 日志中排查。</li>\\n</ul>\\n</li>\\n</ul>"}');export{e as data};

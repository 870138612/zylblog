import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,e as i,f as o}from"./app-b612f3b5.js";const c={},d=o('<h2 id="类的生命周期" tabindex="-1"><a class="header-anchor" href="#类的生命周期" aria-hidden="true">#</a> 类的生命周期</h2><p>类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，前三个阶段可以统称为连接（Linking）。</p><p>类加载过程：<strong>加载 -&gt; 连接 -&gt; 初始化</strong>。</p><p>其中连接过程分为：<strong>验证 -&gt; 准备 -&gt; 解析</strong>。</p><p>整体流程为：<strong>加载 -&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化</strong>。</p>',5),l=o('<h2 id="类加载过程" tabindex="-1"><a class="header-anchor" href="#类加载过程" aria-hidden="true">#</a> 类加载过程</h2><h3 id="加载" tabindex="-1"><a class="header-anchor" href="#加载" aria-hidden="true">#</a> 加载</h3><p>类加载过程的第一步，完成以下三件事情：</p><ol><li>通过全类名获取定义此类的二进制字节流。</li><li>将字节流所代表的<strong>静态存储结构</strong>转化为方法区的<strong>运行时数据结构</strong>。</li><li>在内存中生成一个类的 <code>.class</code> 文件，作为方法区这些数据的入口。</li></ol><p>加载这一步通过类加载器完成的。</p><h3 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h3><p>验证是连接中的第一步。这一步的作用是确保 Class 文件的字节流中包含的信息符合《Java 虚拟机规范》的全部要求，保证这些信息被当做代码运行后不会危害虚拟机自身的安全。</p><p>验证阶段这一步在整个类加载过程中耗费的资源还是相对较多的，但很有必要，可以有效防止恶意代码的执行。任何时候，程序安全都是第一位。</p><p>验证阶段主要由四个检验阶段组成：</p><ul><li><p><strong>文件格式验证</strong>（Class 文件格式检查）</p><blockquote><p><strong>验证字节流是否符合 Class 文件格式的规范</strong>。例如是否以魔数开头，主版本号是否在当前虚拟机的处理范围内。主要目的是保证输入的字节流能正确的解析并存储于方法区内，其余的三个验证阶段都是<strong>基于方法区</strong>的存储结构上进行，不会再直接读取、操作字节流了。</p></blockquote></li><li><p><strong>元数据验证</strong>（字节码语义检查）</p><blockquote><p><strong>对字节码描述的信息进行语义分析，以保证其描述的信息符合《Java 语言规范》要求</strong>。例如这个类是否有父类，这个类是否继承了不允许继承的类。</p></blockquote></li><li><p><strong>字节码验证</strong>（程序语义检查）</p><blockquote><p><strong>通过数据流分析和控制流分析，确定程序语义是合法的，符合逻辑的</strong>。例如函数的参数类型是否正确，对象的类型转换是否合理。</p></blockquote></li><li><p><strong>符号引用验证</strong>（类的正确性检查）</p><blockquote><p><strong>验证类的正确性</strong>。例如该类要使用的其他类、方法、字段是否存在，是否有正确的访问权限。发生在类加载阶段的解析阶段，具体来说就是 JVM 将符号引用转化为直接引用的时候。</p></blockquote></li></ul><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备" aria-hidden="true">#</a> 准备</h3><p><strong>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段</strong>，这些内存都在方法区内分配。</p><ol><li>这时候进行内存分配的仅包括类变量（即是静态变量，被 <code>static</code> 修饰的变量，只与类有关，因此称为类变量），不包括实例变量。实例变量会在对象实例化的时候随着对象一块分配在 Java 堆中。</li><li>类变量所使用的内存都应该在方法区中分配，但是在 JDK 7 及之后，HotSpot 已经把原本放在永久代的<strong>字符串常量池、静态变量</strong>等移动到堆中，这个时候类变量则会随着 Class 对象一起存放在 Java 堆中。</li><li>这是设置的初始值“通常情况”下是数据类型的默认值，例如 <code>public static int value = 111</code>，那么 <code>value</code> 变量在准备阶段的的初始值是 0 而不是 111（初始化阶段才会赋值）。特殊情况，变量添加 <code>final</code> 修饰，则可以看成常量，直接就会在准备阶段赋值。</li></ol><h3 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h3><p><strong>解析阶段就是虚拟机将常量池内的符号引用替换为直接引用的过程</strong>。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用限定符进行引用。</p><blockquote><p>符号引用以一组符号来描述所引用的对象，符号可以使任何字面量，只要能无歧义的定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存中的内容。</p><p>直接引用是可以直接指向目标的指针、相对偏移量或者是一个能定位到目标的句柄。如果使用了直接引用，则引用目标必定在虚拟机的内存中。</p></blockquote><p>当程序执行方法的时候，系统需要明确知道这个方法所处的位置。Java 为每一个类都准备了一张方法表来存放类中所有的方法。当需要调用一个类的方法的时候，只要知道这个方法在方法表中的偏移量就能调用这个方法了。通过解析操作符号引用就能直接变成为目标方法在类中方法表的位置，从而方法才能被调用。</p><p>综上，解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，也就是得到类或者字段、方法在内存中的指针或者偏移量。</p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>初始化阶段是执行初始化方法 <code>&lt;clinit&gt;()</code> 方法的过程，是类加载的最后一步，这一步 JVM 才开始真正执行类中定义的 Java 程序代码（字节码）。<code>clinit</code> 是 <code>class</code> 类构造器对静态变量，静态代码块进行初始化。<code>init</code> 是 <code>instance</code> 实例构造器，对非静态变量解析初始化。</p><p>对于初始化，以下几种情况必须对类进行初始化：</p><ol><li>当遇到 <code>new</code>、<code>getstatic</code>、<code>putstatic</code>、<code>invokestatic</code> 这 4 条字节码指令。</li><li>使用 <code>java.lang.reflect</code> 包的方法对类进行反射调用时如果类没有初始化，则需要先进行初始化。</li><li>初始化一个类，父类还没有初始化，则需要先初始化父类。</li><li>虚拟机启动时，用户需要定义一个需要执行的主类，虚拟机会先初始化这个类。</li><li><code>MethodHandle</code> 和 <code>VarHandle</code> 可以看做轻量级的反射调用机制，使用这两个调用就要先使用 <code>findStaticVarHandle</code> 来初始化要调用的类。</li><li>当一个接口中定义了 JDK 8 新加入的默认方法（被 <code>default</code> 关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</li></ol><h2 id="类卸载" tabindex="-1"><a class="header-anchor" href="#类卸载" aria-hidden="true">#</a> 类卸载</h2><p>卸载类，即该类的 Class 对象被 GC。</p><p>需要满足三个条件才能卸载 / 认为该类是废弃的类：</p><ol><li>该类的所有实例对象都被 GC，也就是说堆中不存在该类的实例对象。</li><li>该类没有在其他任何地方被引用。</li><li>该类的类加载器的实例已经被 GC。</li></ol><p>所以在 JVM 生命周期内，由 JVM 自带的类加载器（JDK 自带的 <code>BootstrapClassLoader</code>，<code>ExtClassLoader</code>，<code>AppClassLoader</code>）加载的类是不会被卸载的，但是自定义的类加载器加载的类是可能被卸载的。</p>',27);function r(s,n){return a(),t("div",null,[d,i(" more "),l])}const g=e(c,[["render",r],["__file","4classloadprocess.html.vue"]]);export{g as default};

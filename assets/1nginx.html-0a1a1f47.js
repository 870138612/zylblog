import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-d7e88745.js";const i="/markdown/image-20230613150948601.png",p="/markdown/image-20230613151142088.png",c="/markdown/image-20230613163140106.png",t="/markdown/image-20230613175233575.png",o="/markdown/image-20230614114418512.png",l={},d=e(`<h2 id="静态-web-配置" tabindex="-1"><a class="header-anchor" href="#静态-web-配置" aria-hidden="true">#</a> 静态 Web 配置</h2><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> localhost</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">location</span> /abc</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">root</span> /html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>listen</code></strong></p><p>监听可以配置成 <code>IP</code> 或 <code>端口</code> 或 <code>IP + 端口</code>。</p><p><code>listen 127.0.0.1:8080</code>、<code>listen 8080</code>、<code>listen *:8080</code>。</p><p><strong><code>server_name</code></strong></p><p>主要用于区分，可以随便起，可以使用 <code>$hostname</code> 配置成主机名。</p><p><strong><code>location</code></strong></p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /abc</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span> /html</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 <code>/</code> 目录会去子目录 <code>html</code> 中寻找页面或资源。也就是说访问 <code>/abc</code> 就会被追加到 <code>root</code> 目录之后，成为 <code>/html/abc</code>。</p><h2 id="反向代理和-header" tabindex="-1"><a class="header-anchor" href="#反向代理和-header" aria-hidden="true">#</a> 反向代理和 Header</h2><h3 id="正向代理与反向代理" tabindex="-1"><a class="header-anchor" href="#正向代理与反向代理" aria-hidden="true">#</a> 正向代理与反向代理</h3><p>在<strong>客户端</strong>代理转发请求称为<strong>正向代理</strong>。例如 VPN。</p><p><img src="`+i+'" alt="image-20230613150948601"></p><p>在<strong>服务端</strong>代理转发请求称为<strong>反向代理</strong>。例如 Nginx。</p><p><img src="'+p+`" alt="image-20230613151142088"></p><h3 id="配置反向代理" tabindex="-1"><a class="header-anchor" href="#配置反向代理" aria-hidden="true">#</a> 配置反向代理</h3><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> localhost</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080/</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 <code>80</code> 端口会被路由到本机的 <code>8080</code> 端口，但是在路由的时候会丢失 <code>Header</code>。</p><h3 id="设置代理请求-headers" tabindex="-1"><a class="header-anchor" href="#设置代理请求-headers" aria-hidden="true">#</a> 设置代理请求 headers</h3><p>用户可以重新定义或追加 header 信息传递给后端服务器。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$proxy_host</span></span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">proxy_set_header</span> Connection close</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于使用反向代理之后，后端无法获取用户的真实 IP，所以一般反向代理都会设置以下 header 信息。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span><span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080/</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用的变量值：</p><p><code>$host</code>：nginx 主机 IP；</p><p><code>$http_host</code>：nginx 主机 IP 和端口；</p><p><code>$proxy_host</code>：<code>localhost:8080</code>，<code>proxy_pass</code> 里面配置的主机名和端口；</p><p><code>$remote_addr</code>：用户的真实 IP，也就是客户端 IP。</p><div class="hint-container info"><p class="hint-container-title">proxy_pass说明</p><ul><li>如果 <code>proxy_pass</code> 的地址只配置到 <code>/</code>，不包括 URI，<code>location</code> 将被追加到转发地址中。</li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /some/</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080/</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问<code>http://localhost/some/page.html</code> 会被代理到 <code>http://localhost:8080/some/page.html</code>。</p><ul><li>如果 <code>proxy_pass</code> 的地址包括 URI，那么 location 将不会被追加到转发地址中。</li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /some/</span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080/zh-cn/</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问<code>http://localhost/some/page.html</code> 会被代理到 <code>http://localhost:8080/zh-cn/page.html</code>，<code>some</code> 路径消去。</p></div><h2 id="动静分离" tabindex="-1"><a class="header-anchor" href="#动静分离" aria-hidden="true">#</a> 动静分离</h2><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">81</span></span><span class="token punctuation">;</span>	    
    <span class="token directive"><span class="token keyword">server_name</span> localhost</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">location</span> ~ \\.(css|js|png|jpg|gif|ico)</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">root</span>  /home/static</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">root</span>  /usr/share/nginx/html</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将静态资源放入 nginx 服务器的 <code>static</code> 目录中，则所有以 <code>(css|js|png|jpg|gif|ico)</code> 结尾的文件都会在这个文件夹中寻找。</p><h3 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h3><p><code>location</code> 可以使用正则表达式。包括：</p><p><code>=</code>：等于，严格匹配，优先级最高；</p><p><code>^~</code>：前缀匹配，表示普通匹配字符，如果匹配成功，不再匹配其他 <code>location</code>，优先级第二；</p><p><code>~</code>：正则匹配，区分大小写，优先级第三；</p><p><code>~*</code>：正则匹配，不区分大小写，优先级第三。</p><p>不写修饰符：优先级最低。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ^~ /img/</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span>  /host/static</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如请求 <code>/img/a.jpg</code> 会请求 <code>/host/static/img/a.jpg</code>，资源都是在 <code>root</code> 后拼接路径，不同于<code>proxy_pass</code>。</p><h3 id="动静分离的好处" tabindex="-1"><a class="header-anchor" href="#动静分离的好处" aria-hidden="true">#</a> 动静分离的好处</h3><p>Tomcat 主要用来处理 servlet 请求。处理像 css、js、图片这些静态文件的 IO 性能不好，因此将静态文件交给 nginx 处理，可以提高系统访问速度，减少 Tomcat 的请求次数，有效减少后端压力。</p><h2 id="缓冲与缓存" tabindex="-1"><a class="header-anchor" href="#缓冲与缓存" aria-hidden="true">#</a> 缓冲与缓存</h2><h3 id="缓冲-buffer" tabindex="-1"><a class="header-anchor" href="#缓冲-buffer" aria-hidden="true">#</a> 缓冲（buffer）</h3><p>缓冲一般放在内存中，如果不适合放入内存（超过了指定大小），则会将响应临时写入磁盘中。</p><p>启用缓冲之后，nginx 先将后端的请求响应（response）放入缓冲区中，等到整个响应完成再返回给客户端。</p><p><img src="`+c+`" alt="image-20230613163140106"></p><p>客户端往往是用户网络，情况复杂，可能出现网络不稳定，速度很慢的情况。</p><p>而 nginx 和后端 server 一般处于同一个机房或者区域，网速稳定且快。</p><p><strong>如果禁用了缓冲</strong>，则在客户端从代理服务器接收响应时，响应将同步发送给客户端，对于需要尽快开始接收响应的快速交互式客户端是可取的。但是如果客户端网速很慢，导致 nginx 只能以较慢的速度将响应传给客户端，进而导致后端 server 也只能以同样较慢的速度传递响应给 nginx，造成一次请求连接耗时较长。</p><p>在高并发的情况下，后端 server 可能会出现大量的连接积压，最终拖垮 server 端。</p><p><strong>开启代理缓冲之后</strong>，nginx 以尽可能快的速度将响应读入缓冲区中，同时根据客户端网络质量以合适的网速将响应传递给客户端。</p><p>这样既解决了 server 端连接过多的问题，也能保证持续稳定的向客户端传递响应。</p><p>通过 <code>proxy_buffering</code> 启用和禁用缓冲区，默认为 <code>on</code>。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">proxy_buffering</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>proxy_buffers</code> 设置每个连接读取响应的缓冲区的数量和大小。</p><p>来自后端服务器响应的第一部分存储在单独的缓冲区中，大小通过 <code>proxy_buffer_size</code> 进行设置，此部分通常是相对较小的 headers，通常设置成小于默认值。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_buffers</span> <span class="token number">16</span> <span class="token number">4K</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_buffer_size</span> <span class="token number">2K</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果整个响应不适合放入内存中，则将其中的一部分保存至磁盘的临时文件中。</p><p><code>proxy_max_temp_file_size</code> 设置临时文件的最大值。</p><p><code>proxy_temp_file_write_size</code> 设置一次写入临时文件的大小。</p><h3 id="缓存-cache" tabindex="-1"><a class="header-anchor" href="#缓存-cache" aria-hidden="true">#</a> 缓存（cache）</h3><p>启用缓存后，nginx 将响应保存在磁盘中，返回给客户端的数据首先在缓存中取，这样相同的请求不用每次都发送给后端服务器，减少到后端请求的数量。</p><p>通过 <code>proxy_cache_path</code> 指定缓存路径名称和大小。</p><p>缓存区可以被多个 server 共享，使用 <code>proxy_cache</code> 指定缓存区。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_cache_path</span>  /data/nginx/cache keys_zone=mycache:10m</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_cache</span> mycache</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8000</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h2><p>跨多个应用程序实例的负载均衡是一种常用的技术，用于优化资源利用率，最大化吞吐量，减少延时，容灾。nginx 将流量分配到多个服务器，可以提升服务器性能，提高扩展性和可靠性。</p><p>通过配置 <code>upstream</code> 实现多个服务器的负载均衡。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> apps</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> localhost</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://apps</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="负载均衡策略" tabindex="-1"><a class="header-anchor" href="#负载均衡策略" aria-hidden="true">#</a> 负载均衡策略</h3><p>负载均衡策略有：轮询，最小连接，ip_hash，hash，权重，随机。</p><ul><li><strong>轮询机制（round-robin）</strong>：默认的负载均衡策略，以轮询方式分发请求。</li><li><strong>最小连接（least-connected）</strong>：将下一个请求分配给最小连接的服务器（较为空闲的服务器）。</li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> apps</span> <span class="token punctuation">{</span>	
    <span class="token directive"><span class="token keyword">least-conn</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">注意</p><p>使用轮训或者最小连接会让每一个客户端的请求分发到不同的服务器上，不能保证同一个客户端将始终定位到同一个服务器，<strong>因此不能会话保持</strong>。</p></div><ul><li><strong>ip_hash</strong>：客户端的 IP 地址将计算哈希键，来自同一个 IP 的请求会分发到同一台服务器。</li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> apps</span> <span class="token punctuation">{</span>	
    <span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果某个时刻对应的服务器宕机，还是会导致同一个 IP 请求转发到其他的服务器，引发缓存失效，路由失效等连锁反应。</p><p>因此有了<strong>一致性 hash 算法</strong>。</p><ul><li><strong>一致性 hash 算法</strong>：通用 hash，允许用户自定义 hash，key 可以是配对的源 IP 地址和端口，也可以是 URI。</li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> apps</span> <span class="token punctuation">{</span>	
    <span class="token directive"><span class="token keyword">hash</span> <span class="token variable">$request_uri</span> consistent</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>consistent</code> 参数启用 <strong>ketama</strong> 一致哈希算法，如果在上游服务器组中添加或者删除服务器，只会<strong>重新映射部分键</strong>，最大限度减少缓存失效。</p><ul><li><strong>权重方式</strong>：在 server 服务器后面添加参数 <code>weight</code> 参数指定权重，权重越大，分得请求的概率越大，不写默认为 1。</li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span> http://localhost:8080 weight=3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>随机方式</strong>：随机挑选 <code>N</code> 个服务器，在 <code>N</code> 个服务器中选择一台发送请求，默认是连接数最小的机器。</li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> apps</span> <span class="token punctuation">{</span>	
    <span class="token directive"><span class="token keyword">random</span> two least_conn</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8081</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8082</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="健康检查" tabindex="-1"><a class="header-anchor" href="#健康检查" aria-hidden="true">#</a> 健康检查</h3><p>如果后端服务器在某个周期内响应失败的次数超过规定值，nginx 将会标记服务器为失败，后续的周期不再分发请求给这个服务器。</p><p>通过 <code>fail_timeout</code> 来设置检查周期，默认为 10 秒。</p><p>通过 <code>max_fails</code> 来设置失败次数，默认是 1 次。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> apps</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> http://localhost:8081 max_fails=3 fail_timeout=30s</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="https-配置" tabindex="-1"><a class="header-anchor" href="#https-配置" aria-hidden="true">#</a> Https 配置</h2><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>    <span class="token comment">#表示监听443端口即https</span>
    <span class="token directive"><span class="token keyword">server_name</span> ylzhong.top</span><span class="token punctuation">;</span> <span class="token comment">#域名</span>
    <span class="token directive"><span class="token keyword">ssl_certificate</span> ./ylzhong.top_nginx/ylzhong.top_bundle.crt</span><span class="token punctuation">;</span>   <span class="token comment">#证书文件路径</span>
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> ./ylzhong.top_nginx/ylzhong.top.key</span><span class="token punctuation">;</span>      <span class="token comment">#证书私钥文件路径</span>
    <span class="token directive"><span class="token keyword">ssl_session_timeout</span> <span class="token number">5m</span></span><span class="token punctuation">;</span>   <span class="token comment">#5分钟session会话保持</span>
    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1 TLSv1.1 TLSv1.2</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>		
        <span class="token directive"><span class="token keyword">root</span>  /usr/share/nginx/html/dist</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">root</span>  /usr/share/nginx/html</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tcp-反向代理" tabindex="-1"><a class="header-anchor" href="#tcp-反向代理" aria-hidden="true">#</a> TCP 反向代理</h2><p>Http 反向代理使用 <code>http</code> 模块，TCP 反向代理使用 <code>stream</code> 模块。可以用来负载均衡连接 MySQL，Redis 等。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    ...
<span class="token punctuation">}</span>

<span class="token directive"><span class="token keyword">stream</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">upstream</span> backend-mysql</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">server</span> localhost:3306</span><span class="token punctuation">;</span>
        <span class="token comment">#定义连接池空闲连接的数量，可以避免打开频繁的打开和关闭连接，相当于线程池里的核心线程数</span>
        <span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">8</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">listen</span> <span class="token number">13306</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> backend-mysql</span><span class="token punctuation">;</span>
        <span class="token comment">#没有添加 http 字段</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重写" tabindex="-1"><a class="header-anchor" href="#重写" aria-hidden="true">#</a> 重写</h2><h3 id="重写-return" tabindex="-1"><a class="header-anchor" href="#重写-return" aria-hidden="true">#</a> 重写 - return</h3><p><strong>转发是服务端行为，重定向是客户端行为。</strong></p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    ...
    <span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://localhost:8000</span><span class="token punctuation">;</span>
    ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重定向的地址如果写成 <code>localhost</code> 会造成重定向错误，会在本机中进行地址映射也就是IP地址 <code>127.0.0.1</code>，而不是服务器中。<code>301</code> 表示永久重定向。</p><h3 id="重写-rewrite" tabindex="-1"><a class="header-anchor" href="#重写-rewrite" aria-hidden="true">#</a> 重写 - rewrite</h3><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">rewrite</span> ^(/download/.*)/media/(/w+)\\.?.*$  <span class="token variable">$1</span>/mp3/<span class="token variable">$2</span>.mp3 last</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">rewrite</span> ^(/download/.*)/audio/(/w+)\\.?.*$  <span class="token variable">$1</span>/mp3/<span class="token variable">$2</span>.ra last</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>^</code> 表示正则开始，<code>$</code> 表示结束。</p><p><code>.*</code> 中 <code>.</code> 表示匹配任何字符，<code>*</code> 表示前面的正则出现 0 或者多次。</p><p><code>/w+</code> 匹配出现 1 次或者多次任意字母或者数字。</p><p><code>\\.</code> 是 <code>.</code> 的转义。<code>?</code> 表示前面的转义出现 0 或者 1 次。</p><p><code>$1、$2</code> 是截取前面括号中匹配的内容。</p><p>例如访问 <code>/download/cnd-west/media/file1</code> 就会变成 <code>/download/cdn-west/mp3/file1.mp3</code>。如果文件有扩展名也会被删除，<code>\\.?.*</code> 就是匹配 <code>.</code> 开头的字符串或者是空串。</p><p><strong>last 与 break</strong></p><p><code>last</code>：rewrite 之后停止后续正则匹配处理，使用重写后的路径，重新搜索 <code>location</code>。</p><p><img src="`+t+'" alt="image-20230613231341162"></p><p><code>break</code>：rewrite 之后停止后续正则匹配处理，使用重写后的路径，执行余下的块内指令。</p><p><img src="'+o+'" alt="image-20230613175233575"></p>',116),r=[d];function u(v,k){return s(),a("div",null,r)}const g=n(l,[["render",u],["__file","1nginx.html.vue"]]);export{g as default};

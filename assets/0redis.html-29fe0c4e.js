import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as t,c as o,b as e,d as s,a as i,f as a}from"./app-4acb2041.js";const c="/markdown/image-20230607180554413.png",l="/markdown/image-20230607180709994.png",p="/markdown/image-20230607181734750.png",h="/markdown/image-20230607181753345.png",u="/markdown/image-20230608175823735.png",g="/markdown/image-20230609155812203.png",b={},m=a('<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="什么是-redis" tabindex="-1"><a class="header-anchor" href="#什么是-redis" aria-hidden="true">#</a> 什么是 Redis？</h3><p>Redis 是一个基于 C 语言开发的开源数据库（BSD 许可），与传统数据库不同的是 Redis 的数据是存在内存中的（内存数据库），读写速度非常快，被广泛应用于缓存方向。并且，Redis 存储的是 KV 键值对数据。</p><p>为了满足不同的业务场景，Redis 内置了多种数据类型实现（比如 <code>String、Hash、Sorted Set、Bitmap、HyperLogLog、GEO</code>）。并且，Redis 还支持事务、持久化、Lua 脚本、多种开箱即用的集群方案（Redis Sentinel、Redis Cluster）。</p><h3 id="redis-为什么这么快" tabindex="-1"><a class="header-anchor" href="#redis-为什么这么快" aria-hidden="true">#</a> Redis 为什么这么快？</h3><ol><li><p>Redis 基于内存，内存的访问速度是磁盘的上千倍；</p></li><li><p>Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；</p></li><li><p>Redis 内置了多种优化过后的数据结构实现，性能非常高。</p></li></ol><h3 id="说一下-redis-和-memcached-的区别和共同点" tabindex="-1"><a class="header-anchor" href="#说一下-redis-和-memcached-的区别和共同点" aria-hidden="true">#</a> 说一下 Redis 和 Memcached 的区别和共同点？</h3><p><strong>共同点</strong>：</p><ol><li>都是基于内存的数据库，一般都用来当做缓存使用。</li><li>都有过期策略。</li><li>两者的性能都非常高。</li></ol><p><strong>区别</strong>：</p><ol><li><strong>支持的数据类型</strong>：Redis 支持更丰富的数据类型（支持更复杂的应用场景）。Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 <code>List，Set，Zset，Hash</code> 等数据结构的存储。Memcached 只支持最简单的 k/v 数据类型。</li><li><strong>持久化</strong>：Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而 Memcached 把数据全部存在内存之中。</li><li><strong>容灾恢复</strong>：Redis 有灾难恢复机制。 因为可以把缓存中的数据持久化到磁盘上。</li><li><strong>内存不足操作</strong>：Redis 在服务器内存使用完之后，可以将不用的数据放到磁盘上。但是，Memcached 在服务器内存使用完之后，就会直接报异常。</li><li><strong>集群支持</strong>：Memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 Redis 目前是原生支持 cluster 模式的。</li><li><strong>线程数</strong>：Memcached 是多线程，非阻塞 IO 复用的网络模型；Redis 使用单线程的多路 IO 复用模型。（Redis 6.0 针对网络数据的读写引入了多线程）</li><li><strong>高级功能</strong>：Redis 支持发布订阅模型、Lua 脚本、事务等功能，而 Memcached 不支持。并且，Redis 支持更多的编程语言。</li><li><strong>过期数据删除</strong>：Memcached 过期数据的删除策略只用了惰性删除，而 Redis 同时使用了惰性删除与定期删除。</li></ol><h3 id="为什么要用-redis-为什么要用缓存" tabindex="-1"><a class="header-anchor" href="#为什么要用-redis-为什么要用缓存" aria-hidden="true">#</a> 为什么要用 Redis/为什么要用缓存？</h3><p><strong>1、高性能</strong></p><p>假如用户第一次访问数据库中的某些数据，这个过程是比较慢，毕竟是从硬盘中读取的。用户访问的数据属于高频数据并且不会经常改变的话，那么就可以很放心地将该用户访问的数据存在缓存中。</p><p><strong>这样有什么好处呢？</strong> 那就是保证用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。</p><p><strong>2、高并发</strong></p><p>一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 Redis 的情况，Redis 集群的话会更高）。</p><blockquote><p>QPS（Query Per Second）：服务器每秒可以执行的查询次数；</p></blockquote><p>由此可见，直接操作缓存能够承受的数据库请求数量是远远大于直接访问数据库的，所以可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。进而，我们也就提高了系统整体的并发。</p><h2 id="常见的缓存读写策略" tabindex="-1"><a class="header-anchor" href="#常见的缓存读写策略" aria-hidden="true">#</a> 常见的缓存读写策略</h2><h3 id="cache-aside-pattern-旁路缓存模式" tabindex="-1"><a class="header-anchor" href="#cache-aside-pattern-旁路缓存模式" aria-hidden="true">#</a> Cache Aside Pattern（旁路缓存模式）</h3><p><strong>Cache Aside Pattern 是平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景。</strong></p><p>服务端同时维护 db 和 cache，并且是以 db 的结果为准。</p><p><strong>写（缓存失效）</strong>：</p><ul><li>先更新 db；</li><li>然后直接删除 cache。</li></ul><p><img src="'+c+'" alt="image-20230607180554413"></p><p><strong>读</strong>：</p><ul><li>从 cache 中读取数据，读到直接返回；</li><li>cache 中没有取到数据，就从 db 中读取数据返回；</li><li>再把数据放到 cache 中。</li></ul><p><img src="'+l+'" alt="image-20230607180709994"></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>在写数据的过程中，可以先删除 cache ，后更新 db 么？</strong></p><p>不行，因为会造成数据库和缓存的数据不一致问题。</p><blockquote><p>请求 1 先把 cache 中的 A 数据删除 -&gt; 请求 2 从 db 中读取数据 -&gt; 请求 1 再把 db 中的 A 数据更新。</p></blockquote><p><strong>在写数据的过程中，先更新 db，后删除 cache 就没有问题了么？</strong></p><p>理论上来说还是可能会出现数据不一致性的问题，不过概率非常小，因为缓存的写入速度是比数据库的写入速度快很多。</p><blockquote><p>请求 1 从 db 读数据 A -&gt; 请求 2 更新 db 中的数据 A（此时缓存中无数据 A ，故不用执行删除缓存操作 ） -&gt; 请求 1 将数据 A 写入 cache（发生在请求2更新数据之前则会出现数据不一致）</p></blockquote></div><p><strong>缺点1</strong>：首次请求的数据一定不在 cache 中。</p><p>解决办法：将热点数据提前放入 cache 中。</p><p><strong>缺点2</strong>：写操作频繁的话会导致 cache 中数据频繁被删除，影响命中率。</p><p>解决办法：</p><ul><li><strong>数据库和缓存数据强一致性场景</strong>：更新 db 的时候同时更新 cache，不过需要添加一个锁来保证更新 cache 的时候不存在线程安全问题。</li><li><strong>可以短暂地允许数据库和缓存数据不一致的场景</strong>：更新 db 的时候同样更新 cache，但是给缓存加一个比较短的过期时间，这样就能保证即使数据不一致影响也比较小。</li></ul><h3 id="read-write-through-pattern-读写穿透" tabindex="-1"><a class="header-anchor" href="#read-write-through-pattern-读写穿透" aria-hidden="true">#</a> Read/Write Through Pattern（读写穿透）</h3><p>Read/Write Through Pattern 中服务端把 cache 视为主要数据存储，从中读取数据并将数据写入其中。cache 服务负责将此数据读取和写入 db，从而减轻了应用程序的职责。</p><p><strong>写（Write Through）：</strong></p><ul><li>先查 cache，cache 中不存在，直接更新 db。</li><li>cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（<strong>同步更新 cache 和 db</strong>）</li></ul><p><img src="'+p+'" alt="image-20230607181734750"></p><p><strong>读（Read Through）：</strong></p><ul><li>从 cache 中读取数据，读取到就直接返回 。</li><li>读取不到的话，先从 db 加载，写入到 cache 后返回响应。</li></ul><p><img src="'+h+'" alt="image-20230607181753345"></p><p>Read-Through Pattern 实际只是在 Cache-Aside Pattern 之上进行了封装。在 Cache-Aside Pattern 下，发生读请求的时候，如果 cache 中不存在对应的数据，是由客户端自己负责把数据写入 cache，而 Read Through Pattern 则是 cache 服务自己来写入缓存的，这对客户端是透明的。</p><p>和 Cache Aside Pattern 一样， Read-Through Pattern 也有首次请求数据一定不在 cache 的问题，对于热点数据可以提前放入缓存中。</p><h3 id="write-behind-pattern-异步缓存写入" tabindex="-1"><a class="header-anchor" href="#write-behind-pattern-异步缓存写入" aria-hidden="true">#</a> Write Behind Pattern（异步缓存写入）</h3><p>Write Behind Pattern 和 Read/Write Through Pattern 很相似，两者都是由 cache 服务来负责 cache 和 db 的读写。</p><p>但是，两个又有很大的不同：<strong>Read/Write Through 是同步更新 cache 和 db，而 Write Behind 则是只更新缓存，不直接更新 db，而是改为异步批量的方式来更新 db。</strong></p><p>很明显，这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。</p><p>这种策略在平时开发过程中也非常非常少见，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。</p><p>Write Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。</p><h2 id="redis-应用" tabindex="-1"><a class="header-anchor" href="#redis-应用" aria-hidden="true">#</a> Redis 应用</h2><h3 id="redis-除了做缓存-还能做什么" tabindex="-1"><a class="header-anchor" href="#redis-除了做缓存-还能做什么" aria-hidden="true">#</a> Redis 除了做缓存，还能做什么？</h3><p><strong>分布式锁</strong>：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，都是基于 Redisson 来实现分布式锁。（秒杀下更新数据库时使用分布式锁）</p>',54),k={href:"http://ylzhong.top/database/2redis/2lock.html",target:"_blank",rel:"noopener noreferrer"},R=a('<p><strong>限流</strong>：一般是通过 Redis + Lua 脚本的方式来实现限流。（秒杀下一人一单占位使用Lua脚本）</p><p><strong>消息队列</strong>：Redis 自带的 <code>List</code> 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 <code>Stream</code> 类型的数据结构更加适合用来做消息队列。它比较类似于 Kafka，有主题和消费组的概念，支持消息持久化以及 ACK 机制。（快速创建秒杀单之后写回数据库使用消息队列）</p><blockquote><p>Redis 2.0 之前，如果想要使用 Redis 来做消息队列的话，只能通过 <code>List</code> 来实现，<code>List</code> 实现消息队列功能太简单，像消息确认机制等功能还需要自己实现，最要命的是没有广播机制，消息也只能被消费一次。</p><p>Redis 2.0 引入了发布订阅 (pub/sub) 功能，解决了 List 实现消息队列没有广播机制的问题。Redis 5.0 新增加的一个数据结构 <code>Stream</code> 来做消息队列。</p><p><code>Stream</code> 支持：</p><ul><li>发布 / 订阅模式</li><li>按照消费者组进行消费</li><li>消息持久化（RDB 和 AOF）</li></ul></blockquote><p><strong>复杂业务场景</strong>：通过 Redis 以及 Redis 扩展（比如 Redisson）提供的数据结构，可以很方便地完成很多复杂的业务场景比如通过 <code>Bitmap</code> 统计活跃用户、通过 <code>Sorted Set</code> 维护排行榜。</p><h2 id="redis-数据结构" tabindex="-1"><a class="header-anchor" href="#redis-数据结构" aria-hidden="true">#</a> Redis 数据结构</h2>',5),v={href:"http://ylzhong.top/database/2redis/3redisdatastructures.html",target:"_blank",rel:"noopener noreferrer"},f=a('<h3 id="redis-常用的数据结构有哪些" tabindex="-1"><a class="header-anchor" href="#redis-常用的数据结构有哪些" aria-hidden="true">#</a> Redis 常用的数据结构有哪些？</h3><ul><li><strong>5 种基础数据结构</strong>：<code>String</code>（字符串）、<code>List</code>（列表）、<code>Set</code>（集合）、<code>Hash</code>（散列）、<code>Zset</code>（有序集合）。</li><li><strong>3 种特殊数据结构</strong>：<code>HyperLogLogs</code>（基数统计）、<code>Bitmap</code>（位存储）、<code>Geospatial</code>（地理位置）。</li></ul><h3 id="string-的应用场景有哪些" tabindex="-1"><a class="header-anchor" href="#string-的应用场景有哪些" aria-hidden="true">#</a> String 的应用场景有哪些？</h3><p>String 是 Redis 中最简单同时也是最常用的一个数据结构。<code>String</code> 是一种二进制安全的数据结构，可以用来存储任何类型的数据比如字符串、整数、浮点数、图片（图片的 base64 编码或者解码或者图片的路径）、序列化后的对象。</p><p>String 的常见应用场景如下：</p><ul><li>常规数据（比如 session、token、序列化后的对象、图片的路径）的缓存；</li><li>计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；</li><li>分布式锁（利用 <code>SETNX key value</code> 命令可以实现一个最简易的分布式锁）。</li></ul><h3 id="string-还是-hash-存储对象数据更好呢" tabindex="-1"><a class="header-anchor" href="#string-还是-hash-存储对象数据更好呢" aria-hidden="true">#</a> String 还是 Hash 存储对象数据更好呢？</h3><ul><li><code>String</code> 存储的是<strong>序列化后的对象数据</strong>，存放的是整个对象。<code>Hash</code> 是对对象的每个字段单独存储，可以获取部分字段的信息，也可以修改或者添加部分字段，节省网络流量。如果对象中某些字段需要经常变动或者经常需要单独查询对象中的个别字段信息，Hash 就非常适合。</li><li><code>String</code> 存储相对来说更加节省内存，缓存相同数量的对象数据，<code>String</code> 消耗的内存约是 <code>Hash</code> 的一半。并且，存储具有多层嵌套的对象时也方便很多。如果系统对性能和资源消耗非常敏感的话，<code>String</code> 就非常适合。</li></ul><h3 id="string-的底层实现是什么" tabindex="-1"><a class="header-anchor" href="#string-的底层实现是什么" aria-hidden="true">#</a> String 的底层实现是什么？</h3><p>Redis 是基于 C 语言编写的，但 Redis 的 <code>String</code> 类型的底层实现并不是 C 语言中的字符串（即以空字符 <code>\\0</code> 结尾的字符数组），而是自己编写了 <strong>SDS</strong>（Simple Dynamic String，简单动态字符串）来作为底层实现。</p><p>Redis 会根据初始化的长度决定使用哪种类型，从而减少内存的使用。</p><p>SDS 相比于 C 语言中的字符串有如下提升：</p><ul><li><p><strong>可以避免缓冲区溢出</strong>：C 语言中的字符串被修改（比如拼接）时，一旦没有分配足够长度的内存空间，就会造成缓冲区溢出。SDS 被修改时，会先根据 len 属性检查空间大小是否满足要求，如果不满足，则先扩展至所需大小再进行修改操作。</p></li><li><p><strong>获取字符串长度的复杂度较低</strong>：C 语言中的字符串的长度通常是经过遍历计数来实现的，时间复杂度为 O(n)。SDS 的长度获取直接读取 len 属性即可，时间复杂度为 O(1)。</p></li><li><p><strong>减少内存分配次数</strong>：为了避免修改（增加/减少）字符串时，每次都需要重新分配内存（C 语言的字符串是这样的），SDS 实现了空间预分配和惰性空间释放两种优化策略。当 SDS 需要增加字符串时，Redis 会为 SDS 分配好内存，并且根据特定的算法分配多余的内存，这样可以减少连续执行字符串增长操作所需的内存重分配次数。当 SDS 需要减少字符串时，这部分内存不会立即被回收，会被记录下来，等待后续使用（支持手动释放，有对应的 API）。</p></li><li><p><strong>二进制安全</strong>：C 语言中的字符串以空字符 <code>\\0</code> 作为字符串结束的标识，这存在一些问题，像一些二进制文件（比如图片、视频、音频）就可能包括空字符，C 字符串无法正确保存。SDS 使用 len 属性判断字符串是否结束，不存在这个问题。</p></li></ul><h3 id="购物车信息用-string-还是-hash-存储更好呢" tabindex="-1"><a class="header-anchor" href="#购物车信息用-string-还是-hash-存储更好呢" aria-hidden="true">#</a> 购物车信息用 String 还是 Hash 存储更好呢？</h3><p>由于购物车中的商品频繁修改和变动，购物车信息建议使用 <code>Hash</code> 存储：</p><ul><li>用户 id 为 key；</li><li>商品 id 为 field，商品数量为 value。</li></ul><h3 id="使用-redis-实现一个排行榜怎么做" tabindex="-1"><a class="header-anchor" href="#使用-redis-实现一个排行榜怎么做" aria-hidden="true">#</a> 使用 Redis 实现一个排行榜怎么做？</h3><p>Redis 中有一个叫做 <code>Sorted Set</code> 的数据结构经常被用在各种排行榜的场景，比如直播间送礼物的排行榜、朋友圈的微信步数排行榜、游戏中的段位排行榜、话题热度排行榜等等。</p><p>相关的一些 Redis 命令: <code>ZRANGE</code> (从小到大排序)、 <code>ZREVRANGE</code> （从大到小排序）、<code>ZREVRANK</code> (指定元素排名)。</p><h3 id="set-的应用场景是什么" tabindex="-1"><a class="header-anchor" href="#set-的应用场景是什么" aria-hidden="true">#</a> Set 的应用场景是什么？</h3><p>Redis 中 <code>Set</code> 是一种无序集合，集合中的元素没有先后顺序但都唯一，有点类似于 Java 中的 <code>HashSet</code> 。</p><p>Set 的常见应用场景如下：</p><ul><li>存放的数据不能重复的场景：网站 UV 统计（数据量巨大的场景还是 <code>HyperLogLog</code>更适合一些）、文章点赞、动态点赞等等。</li><li>需要获取多个数据源交集、并集和差集的场景：共同好友（交集）、共同粉丝（交集）、共同关注（交集）、好友推荐（差集）、音乐推荐（差集）、订阅号推荐（差集 + 交集） 等等。</li><li>需要随机获取数据源中的元素的场景：抽奖系统、随机点名等等。</li></ul><h3 id="使用-set-实现抽奖系统怎么做" tabindex="-1"><a class="header-anchor" href="#使用-set-实现抽奖系统怎么做" aria-hidden="true">#</a> 使用 Set 实现抽奖系统怎么做？</h3><p>如果想要使用 <code>Set</code> 实现一个简单的抽奖系统的话，直接使用下面这几个命令就可以了：</p><ul><li><code>SADD key member1 member2 ...</code>：向指定集合添加一个或多个元素。</li><li><code>SPOP key count</code>：随机移除并获取指定集合中一个或多个元素，适合不允许重复中奖的场景。</li><li><code>SRANDMEMBER key count</code>：随机获取指定集合中指定数量的元素，适合允许重复中奖的场景。</li></ul><h3 id="使用-bitmap-统计活跃用户怎么做" tabindex="-1"><a class="header-anchor" href="#使用-bitmap-统计活跃用户怎么做" aria-hidden="true">#</a> 使用 Bitmap 统计活跃用户怎么做？</h3><p><code>Bitmap</code> 存储的是连续的二进制数字（0 和 1），通过 <code>Bitmap</code> 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。</p><p>如果想要使用 <code>Bitmap</code> 统计活跃用户的话，可以使用日期（精确到天）作为 key，然后用户 id 为 offset，如果当日活跃过就设置为 1。</p><p><img src="'+u+`" alt="image-20230608175823735"></p><p>初始化数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SETBIT <span class="token number">20210308</span> <span class="token number">1</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> SETBIT <span class="token number">20210308</span> <span class="token number">2</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> SETBIT <span class="token number">20210309</span> <span class="token number">1</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统计 20210308~20210309 总活跃用户数:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> BITOP and desk1 <span class="token number">20210308</span> <span class="token number">20210309</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> BITCOUNT desk1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统计 20210308~20210309 在线活跃用户数:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> BITOP or desk2 <span class="token number">20210308</span> <span class="token number">20210309</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> BITCOUNT desk2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-hyperloglog-统计页面-uv-怎么做" tabindex="-1"><a class="header-anchor" href="#使用-hyperloglog-统计页面-uv-怎么做" aria-hidden="true">#</a> 使用 HyperLogLog 统计页面 UV 怎么做？</h3><p>使用 <code>HyperLogLog</code> 统计页面 UV 主要需要用到下面这两个命令：</p><ul><li><code>PFADD key element1 element2 ...</code>：添加一个或多个元素到 <code>HyperLogLog</code> 中。</li><li><code>PFCOUNT key1 key2</code>：获取一个或者多个 <code>HyperLogLog</code> 的唯一计数。</li></ul><p>1、将访问指定页面的每个用户 id 添加到 <code>HyperLogLog</code> 中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PFADD PAGE_1:UV USER1 USER2 <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> USERn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、统计指定页面的 UV。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PFCOUNT PAGE_1:UV
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="redis-持久化" tabindex="-1"><a class="header-anchor" href="#redis-持久化" aria-hidden="true">#</a> Redis 持久化</h2>`,44),S={href:"http://ylzhong.top/database/2redis/4redispersistence.html",target:"_blank",rel:"noopener noreferrer"},_=a('<h2 id="redis-线程模型" tabindex="-1"><a class="header-anchor" href="#redis-线程模型" aria-hidden="true">#</a> Redis 线程模型</h2><div class="hint-container info"><p class="hint-container-title">Redis 读写单线程</p><p>对于读写来说，Redis 一直是单线程模型。不过在 Redis 4.0 版本之后引入了多线程来执行一些大键值对的异步删除操作，Redis 6.0 之后引入了多线程来处理网络请求（提高网络IO读写性能）。</p></div><h3 id="redis-单线程了解吗" tabindex="-1"><a class="header-anchor" href="#redis-单线程了解吗" aria-hidden="true">#</a> Redis 单线程了解吗？</h3><p>Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，这套时间处理模型对应的是Redis中的文件事件处理器，由于文件事件处理器是单线程方式运行的，所以一般说 Redis 是单线程模型。</p>',4),x={class:"hint-container info"},y=e("p",{class:"hint-container-title"},"Redis IO多路复用",-1),P=e("p",null,"文件事件处理器使用 IO 多路复用程序来同时监听多个套接字，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。",-1),A=e("p",null,"虽然文件事件处理器以单线程方式运行，但通过 IO 多路复用程序来监听多个套接字，文件事件处理器既实现了高性能的网络通信模型，又可以很好地与 Redis 服务器中其他同样以单线程方式运行的模块进行对阶，这保持列 Redis 内部单线程设计的简单性。",-1),L={href:"https://ylzhong.top/computer/3io.html#io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8-io-multiplexing",target:"_blank",rel:"noopener noreferrer"},O=a('<h3 id="单线程如何监听大量的客户端连接" tabindex="-1"><a class="header-anchor" href="#单线程如何监听大量的客户端连接" aria-hidden="true">#</a> 单线程如何监听大量的客户端连接？</h3><p>Redis 通过 IO 多路复用程序来监听来自客户端的大量连接（或者说是监听多个 socket），它将感兴趣的事件及类型注册到内核中并监听每个事件是否发生。</p><p>IO 多路复用技术的使用让 Redis 不需要额外创建多余的线程来监听客户端的大量连接，降低了资源消耗，（和 NIO 中的 <code>Selector</code> 组件很像）。</p><p><strong>文件事件处理器</strong>包含四个部分：</p><ul><li>多个 socket（客户端连接）；</li><li>IO 多路复用程序（支持多个客户端连接的关键）；</li><li>文件事件派发器（将 socket 关联到相应的事件处理器）；</li><li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）。</li></ul><p><img src="'+g+`" alt="image-20230609155812203"></p><h3 id="redis-6-0-之前为什么不使用多线程" tabindex="-1"><a class="header-anchor" href="#redis-6-0-之前为什么不使用多线程" aria-hidden="true">#</a> Redis 6.0 之前为什么不使用多线程？</h3><p><strong>在 Redis 4.0 之后的版本中就已经加入了对多线程的支持。不过多线程主要是针对一些大键值对的删除操作的命令，使用这些命令就会使用主线程之外的其他线程来异步处理。</strong></p><ul><li>单线程变成容易并且易于维护；</li><li>Redis 的性能瓶颈不再 CPU，主要在于内存和网络；</li><li>多线程就会存在死锁、线程上下文切换等问题，可能会影响性能。</li></ul><h3 id="redis-6-0-之后为何引入了多线程" tabindex="-1"><a class="header-anchor" href="#redis-6-0-之后为何引入了多线程" aria-hidden="true">#</a> Redis 6.0 之后为何引入了多线程？</h3><p>Redis 6.0 引入多线程主要是为了提高网络IO读写性能，这是 Redis 中的一个性能瓶颈。</p><p>虽然引入了多线程，但是 Redis 的多线程只是在网络数据的读写上使用，执行命令仍然是单线程顺序执行。</p><h3 id="redis后台线程了解吗" tabindex="-1"><a class="header-anchor" href="#redis后台线程了解吗" aria-hidden="true">#</a> Redis后台线程了解吗？</h3><p>虽然经常说 Redis 是单线程模型（主要逻辑是单线程完成的），但实际还有一些后台线程用于执行一些比较耗时的操作：</p><ul><li>通过 <code>bio_close_file</code> 后台线程来释放 AOF/RDB 等过程中产生的临时文件资源。</li><li>通过 <code>bio_aof_fsync</code> 后台线程调用 <code>fsync</code> 函数将系统内核缓冲区还未同步到到磁盘的数据强制刷到磁盘（ AOF 文件）。</li><li>通过 <code>bio_lazy_free</code> 后台线程释放大对象（已删除）占用的内存空间.</li></ul><h2 id="redis-内存管理" tabindex="-1"><a class="header-anchor" href="#redis-内存管理" aria-hidden="true">#</a> Redis 内存管理</h2><h3 id="redis-给缓存数据设置过期时间有啥用" tabindex="-1"><a class="header-anchor" href="#redis-给缓存数据设置过期时间有啥用" aria-hidden="true">#</a> Redis 给缓存数据设置过期时间有啥用？</h3><p>因为内存有限，不设置过期时间，会导致 OOM。</p><p>Redis 自带了给缓存数据设置过期时间的功能，比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> expire key <span class="token number">60</span> <span class="token comment"># 数据在 60s 后过期</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setex key <span class="token number">60</span> value <span class="token comment"># 数据在 60s 后过期 (setex:[set] + [ex]pire)</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl key <span class="token comment"># 查看数据还有多久过期</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">56</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis 中除了字符串类型有自己独有设置过期时间的命令 <code>setex</code> 外，其他方法都需要依靠 <code>expire</code> 命令来设置过期时间。 <code>persist</code> 命令可以溢出一个键的过期时间。</p><h3 id="redis-是如何判断数据是否过期的" tabindex="-1"><a class="header-anchor" href="#redis-是如何判断数据是否过期的" aria-hidden="true">#</a> Redis 是如何判断数据是否过期的？</h3><p>Redis 通过过期字典（可以看做是 hash 表）来保存数据过期的时间，过期字典的键指向 Redis 数据库中的某个 key，过期字典的值是一个 <code>long long</code> 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间。</p><h3 id="过期数据的删除策略" tabindex="-1"><a class="header-anchor" href="#过期数据的删除策略" aria-hidden="true">#</a> 过期数据的删除策略</h3><p>常用的过期数据的删除策略就两个：</p><ol><li><strong>惰性删除</strong>：只会在取出 key 的时候才对数据进行过期检查，这样对 CPU 友好，但是可能会造成过多的 key 没有被删除。</li><li><strong>定期删除</strong>：每隔一段时间抽取一批 key 执行删除过期 key 操作。并且 Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。</li></ol><h3 id="redis-内存淘汰机制" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰机制" aria-hidden="true">#</a> Redis 内存淘汰机制</h3><p>Redis 提供 6 种数据淘汰策略：</p><ol><li><strong>volatile-lru（least recently used）</strong>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选最近最少使用的数据淘汰。</li><li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选将要过期的数据淘汰。</li><li><strong>volatile-random</strong>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中任意选择数据淘汰。</li><li><strong>allkeys-lru（least recently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。</li><li><strong>allkeys-random</strong>：从数据集（<code>server.db[i].dict</code>）中任意选择数据淘汰。</li><li><strong>no-eviction</strong>：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。</li></ol><p>4.0 版本后增加以下两种：</p><ol><li><strong>volatile-lfu（least frequently used）</strong>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选最不经常使用的数据淘汰。</li><li><strong>allkeys-lfu（least frequently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。</li></ol>`,31);function B(T,C){const n=r("ExternalLinkIcon");return t(),o("div",null,[m,e("p",null,[s("☀️详见"),e("a",k,[s("分布式锁"),i(n)])]),R,e("p",null,[s("☀️详见"),e("a",v,[s("Redis 数据结构"),i(n)])]),f,e("p",null,[s("☀️详见"),e("a",S,[s("Redis 持久化"),i(n)])]),_,e("div",x,[y,P,A,e("p",null,[s("☀️详见"),e("a",L,[s("IO 多路复用"),i(n)])])]),O])}const D=d(b,[["render",B],["__file","0redis.html.vue"]]);export{D as default};

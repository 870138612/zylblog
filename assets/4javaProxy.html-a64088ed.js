import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as u,c as k,e as r,a as o,w as a,b as n,d as s,f as l}from"./app-ef194f48.js";const d={},m=n("p",null,"使用代理对象来代替真实对象的访问，这样能在不改变目标对象的前提下，提供额外的功能，扩展目标对象。",-1),v=n("p",null,"代理模式有静态代理和动态代理两种实现方式。",-1),b=n("h2",{id:"静态代理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#静态代理","aria-hidden":"true"},"#"),s(" 静态代理")],-1),g=n("p",null,[s("静态代理中，对方法的增强是手动完成的，非常不灵活，从 JVM 层面来说，静态代理在编译的时候就将接口、实现类、代理类变成一个个 "),n("code",null,"class"),s(" 文件。编译从 "),n("code",null,".java"),s(" 变成 "),n("code",null,".class"),s("。")],-1),y=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"TInterface"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"method"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"TargetInterface"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"method"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" str"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TargetProxy"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"TInterface"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"Target"),s(" target"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"TargetProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"T"),s(" target"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("target"),n("span",{class:"token operator"},"="),s("target"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"method"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"增强前置方法"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"method"),n("span",{class:"token punctuation"},"("),s("str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//在方法的前后进行增强，编译阶段就能确定.class"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"增强后置方法"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Main"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"T"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"TargetProxy"),s(" targetProxy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"TargetProxy"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        targetProxy`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"method"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"java"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=l(`<h2 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理" aria-hidden="true">#</a> 动态代理</h2><p>相对于静态代理，动态代理更加灵活，不需要对每一个目标对象创建一个代理类，也不需要强制实现接口。</p><p><strong>动态代理属于运行时动态生成类字节码，并加载到 JVM 中</strong>。</p><p>动态代理主要有两种：JDK 动态代理、CGLIB 动态代理。</p><h3 id="jdk-动态代理" tabindex="-1"><a class="header-anchor" href="#jdk-动态代理" aria-hidden="true">#</a> JDK 动态代理</h3><p>Java 中动态代理中 <code>InvocationHandler</code> 接口和 <code>Proxy</code> 类是核心。</p><p><code>Proxy</code> 类中使用较多的方法是 <code>newProxyInstance()</code>，用来生成一个代理对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>
                                      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>
                                      <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>newProxyInstance()</code> 方法有三个参数：</p><ul><li><code>loader</code>：类加载器，用来加载代理对象；</li><li><code>interfaces</code>：被代理类实现的接口；</li><li><code>h</code>：实现了 <code>InvocationHandler</code> 接口的对象。</li></ul><p>要实现动态代理，还要实现 <code>InvocationHandler</code> 接口，使用动态代理类调用方法的时候，方法就会被转发到实现 <code>InvocationHandler</code> 接口类的 <code>invoke</code> 方法来调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
    * 当你使用代理对象调用方法的时候实际会调用到这个方法
    */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>invoke()</code> 方法有三个参数：</p><ul><li><code>proxy</code>：动态生成的代理类；</li><li><code>method</code>：与代理类对象调用的方法相对应；</li><li><code>args</code>：当前 method 方法的参数。</li></ul><p>流程：通过 <code>proxy</code> 类的 <code>newInstance()</code> 创建代理对象调用方法，会实际调用实现 <code>InvocationHandler</code> 接口类的 <code>invoke()</code> 方法。</p><p><strong>实现：</strong></p>`,16),j=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"TInterface"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"targetMethod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"TargetInterface"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"targetMethod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" str"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TargetProxy"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"InvocationHandler"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"Object"),s(" target"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"TargetProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Object"),s(" target"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("target"),n("span",{class:"token operator"},"="),s("target"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Object"),s(),n("span",{class:"token function"},"invoke"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Object"),s(" proxy"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Method"),s(" method"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"前置增强"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Object"),s(" result "),n("span",{class:"token operator"},"="),s(" method"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"invoke"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"后置增强"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"JdkProxyFactory"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"Object"),s(),n("span",{class:"token function"},"getProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Object"),s(" target"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newProxyInstance"),n("span",{class:"token punctuation"},"("),s(`
                target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClassLoader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
                target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getInterfaces"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"TargetProxy"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`    
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"TInteger"),s(" proxy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TInteger"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token class-name"},"JdkProxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    proxy`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"send"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"abc"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=l(`<h3 id="cglib-动态代理" tabindex="-1"><a class="header-anchor" href="#cglib-动态代理" aria-hidden="true">#</a> CGLIB 动态代理</h3><p>JDK 代理需要实现接口的类才能作为目标对象，为了解决这个问题，可以使用 CGLIB 动态代理。</p><p>CGLIB 动态代理中 <code>MethodIntercepter</code> 接口和 <code>Enhancer</code> 类是核心。</p><p>需要自定义接口 <code>MethodIntercepter</code> 并重写 <code>intercept</code> 方法，用于拦截增强被代理类的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MethodInterceptor</span>
<span class="token keyword">extends</span> <span class="token class-name">Callback</span><span class="token punctuation">{</span>
    <span class="token comment">// 拦截被代理类中的方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>obj</code>：被代理的对象（需要增强的对象）；</li><li><code>method</code>：被拦截的方法；</li><li><code>args</code>：方法参数；</li><li><code>proxy</code>：用于调用原始方法。</li></ul><p>通过 <code>Enhancer</code> 类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 <code>MethodInterceptor</code> 中的 <code>intercept</code> 方法。</p><p><strong>实现：</strong></p><p>添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),P=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"targetMethod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"目标类"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" str"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"DebugMethodInterceptor"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"MethodInterceptor"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Object"),s(),n("span",{class:"token function"},"intercept"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Object"),s(" o"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Method"),s(" method"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"MethodProxy"),s(" methodProxy"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Throwable"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"before method "'),s(),n("span",{class:"token operator"},"+"),s(" method"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Object"),s(" object "),n("span",{class:"token operator"},"="),s(" methodProxy"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"invokeSuper"),n("span",{class:"token punctuation"},"("),s("o"),n("span",{class:"token punctuation"},","),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"after method "'),s(),n("span",{class:"token operator"},"+"),s(" method"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" object"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CglibProxyFactory"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"Object"),s(),n("span",{class:"token function"},"getProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">")]),s(" clazz"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 创建动态代理增强类"),s(`
        `),n("span",{class:"token class-name"},"Enhancer"),s(" enhancer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Enhancer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 设置类加载器"),s(`
        enhancer`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setClassLoader"),n("span",{class:"token punctuation"},"("),s("clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClassLoader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 设置被代理类"),s(`
        enhancer`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setSuperclass"),n("span",{class:"token punctuation"},"("),s("clazz"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 设置方法拦截器"),s(`
        enhancer`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setCallback"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DebugMethodInterceptor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 创建代理类"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" enhancer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"create"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"T"),s(" proxy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token class-name"},"CglibProxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
proxy`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"send"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"java"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=l('<h2 id="jdk-动态代理和-cglib-动态代理的区别" tabindex="-1"><a class="header-anchor" href="#jdk-动态代理和-cglib-动态代理的区别" aria-hidden="true">#</a> JDK 动态代理和 CGLIB 动态代理的区别</h2><ol><li><p>JDK 动态代理需要目标类实现接口或直接代理接口，CGLIB 则不需要，CGLIB 是通过生成一个被代理类的子类来拦截代理类的方法调用，因此不能代理声明 <code>final</code> 类型的类和方法。</p></li><li><p>JDK 动态代理的效率要更好。</p></li></ol><h2 id="静态代理和动态代理的区别" tabindex="-1"><a class="header-anchor" href="#静态代理和动态代理的区别" aria-hidden="true">#</a> 静态代理和动态代理的区别</h2><ol><li>动态代理更加灵活，不需要实现接口可以直接代理实现类，并且不用为每一个目标类都创建一个代理类，静态代理中接口新增方法，则目标类和代理类都要修改。</li><li>静态代理在编译时就将接口、实现类、代理类这些都变成一个个 class 文件，而动态代理是在运行时产生 class 文件，并加载到 JVM 中。</li></ol>',4);function M(J,L){const c=i("Tabs");return u(),k("div",null,[m,v,r(" more "),b,g,o(c,{id:"13",data:[{id:"目标对象"},{id:"代理对象"},{id:"测试"}],active:0},{title0:a(({value:t,isActive:e})=>[s("目标对象")]),title1:a(({value:t,isActive:e})=>[s("代理对象")]),title2:a(({value:t,isActive:e})=>[s("测试")]),tab0:a(({value:t,isActive:e})=>[y]),tab1:a(({value:t,isActive:e})=>[h]),tab2:a(({value:t,isActive:e})=>[w]),_:1}),f,o(c,{id:"96",data:[{id:"目标对象"},{id:"JDK动态代理对象"},{id:"获取代理对象的工厂类"},{id:"测试"}],active:0},{title0:a(({value:t,isActive:e})=>[s("目标对象")]),title1:a(({value:t,isActive:e})=>[s("JDK动态代理对象")]),title2:a(({value:t,isActive:e})=>[s("获取代理对象的工厂类")]),title3:a(({value:t,isActive:e})=>[s("测试")]),tab0:a(({value:t,isActive:e})=>[j]),tab1:a(({value:t,isActive:e})=>[x]),tab2:a(({value:t,isActive:e})=>[_]),tab3:a(({value:t,isActive:e})=>[I]),_:1}),T,o(c,{id:"155",data:[{id:"目标对象"},{id:"方法拦截器"},{id:"获取代理对象的工厂"},{id:"测试"}],active:0},{title0:a(({value:t,isActive:e})=>[s("目标对象")]),title1:a(({value:t,isActive:e})=>[s("方法拦截器")]),title2:a(({value:t,isActive:e})=>[s("获取代理对象的工厂")]),title3:a(({value:t,isActive:e})=>[s("测试")]),tab0:a(({value:t,isActive:e})=>[P]),tab1:a(({value:t,isActive:e})=>[S]),tab2:a(({value:t,isActive:e})=>[A]),tab3:a(({value:t,isActive:e})=>[O]),_:1}),C])}const H=p(d,[["render",M],["__file","4javaProxy.html.vue"]]);export{H as default};
